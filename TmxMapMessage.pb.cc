// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TmxMapMessage.proto

#include "TmxMapMessage.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_TmxMapMessage_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TmxMap_ImgSet_TmxMapMessage_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_TmxMapMessage_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TmxMap_Layer_TmxMapMessage_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_TmxMapMessage_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TmxMap_Point_TmxMapMessage_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_TmxMapMessage_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TmxMap_Rect_TmxMapMessage_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_TmxMapMessage_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_TmxMap_TileImg_TmxMapMessage_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_TmxMapMessage_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TmxMap_TileInfo_TmxMapMessage_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_TmxMapMessage_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TmxMap_TileSetting_TmxMapMessage_2eproto;
namespace Proto {
class TmxMap_RectDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TmxMap_Rect> _instance;
} _TmxMap_Rect_default_instance_;
class TmxMap_PointDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TmxMap_Point> _instance;
} _TmxMap_Point_default_instance_;
class TmxMap_ImgSetDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TmxMap_ImgSet> _instance;
} _TmxMap_ImgSet_default_instance_;
class TmxMap_TileImgDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TmxMap_TileImg> _instance;
} _TmxMap_TileImg_default_instance_;
class TmxMap_TileInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TmxMap_TileInfo> _instance;
} _TmxMap_TileInfo_default_instance_;
class TmxMap_TileSettingDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TmxMap_TileSetting> _instance;
} _TmxMap_TileSetting_default_instance_;
class TmxMap_LayerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TmxMap_Layer> _instance;
} _TmxMap_Layer_default_instance_;
class TmxMapDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TmxMap> _instance;
} _TmxMap_default_instance_;
}  // namespace Proto
static void InitDefaultsscc_info_TmxMap_TmxMapMessage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Proto::_TmxMap_default_instance_;
    new (ptr) ::Proto::TmxMap();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Proto::TmxMap::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_TmxMap_TmxMapMessage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_TmxMap_TmxMapMessage_2eproto}, {
      &scc_info_TmxMap_ImgSet_TmxMapMessage_2eproto.base,
      &scc_info_TmxMap_TileImg_TmxMapMessage_2eproto.base,
      &scc_info_TmxMap_TileSetting_TmxMapMessage_2eproto.base,
      &scc_info_TmxMap_Layer_TmxMapMessage_2eproto.base,}};

static void InitDefaultsscc_info_TmxMap_ImgSet_TmxMapMessage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Proto::_TmxMap_ImgSet_default_instance_;
    new (ptr) ::Proto::TmxMap_ImgSet();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Proto::TmxMap_ImgSet::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TmxMap_ImgSet_TmxMapMessage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TmxMap_ImgSet_TmxMapMessage_2eproto}, {}};

static void InitDefaultsscc_info_TmxMap_Layer_TmxMapMessage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Proto::_TmxMap_Layer_default_instance_;
    new (ptr) ::Proto::TmxMap_Layer();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Proto::TmxMap_Layer::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TmxMap_Layer_TmxMapMessage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TmxMap_Layer_TmxMapMessage_2eproto}, {
      &scc_info_TmxMap_TileInfo_TmxMapMessage_2eproto.base,}};

static void InitDefaultsscc_info_TmxMap_Point_TmxMapMessage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Proto::_TmxMap_Point_default_instance_;
    new (ptr) ::Proto::TmxMap_Point();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Proto::TmxMap_Point::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TmxMap_Point_TmxMapMessage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TmxMap_Point_TmxMapMessage_2eproto}, {}};

static void InitDefaultsscc_info_TmxMap_Rect_TmxMapMessage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Proto::_TmxMap_Rect_default_instance_;
    new (ptr) ::Proto::TmxMap_Rect();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Proto::TmxMap_Rect::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TmxMap_Rect_TmxMapMessage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TmxMap_Rect_TmxMapMessage_2eproto}, {}};

static void InitDefaultsscc_info_TmxMap_TileImg_TmxMapMessage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Proto::_TmxMap_TileImg_default_instance_;
    new (ptr) ::Proto::TmxMap_TileImg();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Proto::TmxMap_TileImg::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_TmxMap_TileImg_TmxMapMessage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_TmxMap_TileImg_TmxMapMessage_2eproto}, {
      &scc_info_TmxMap_Rect_TmxMapMessage_2eproto.base,
      &scc_info_TmxMap_Point_TmxMapMessage_2eproto.base,}};

static void InitDefaultsscc_info_TmxMap_TileInfo_TmxMapMessage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Proto::_TmxMap_TileInfo_default_instance_;
    new (ptr) ::Proto::TmxMap_TileInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Proto::TmxMap_TileInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TmxMap_TileInfo_TmxMapMessage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TmxMap_TileInfo_TmxMapMessage_2eproto}, {}};

static void InitDefaultsscc_info_TmxMap_TileSetting_TmxMapMessage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Proto::_TmxMap_TileSetting_default_instance_;
    new (ptr) ::Proto::TmxMap_TileSetting();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Proto::TmxMap_TileSetting::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TmxMap_TileSetting_TmxMapMessage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TmxMap_TileSetting_TmxMapMessage_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_TmxMapMessage_2eproto[8];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_TmxMapMessage_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_TmxMapMessage_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_TmxMapMessage_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto::TmxMap_Rect, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::TmxMap_Rect, x_),
  PROTOBUF_FIELD_OFFSET(::Proto::TmxMap_Rect, y_),
  PROTOBUF_FIELD_OFFSET(::Proto::TmxMap_Rect, w_),
  PROTOBUF_FIELD_OFFSET(::Proto::TmxMap_Rect, h_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto::TmxMap_Point, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::TmxMap_Point, x_),
  PROTOBUF_FIELD_OFFSET(::Proto::TmxMap_Point, y_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto::TmxMap_ImgSet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::TmxMap_ImgSet, path_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto::TmxMap_TileImg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::TmxMap_TileImg, gid_),
  PROTOBUF_FIELD_OFFSET(::Proto::TmxMap_TileImg, imgindex_),
  PROTOBUF_FIELD_OFFSET(::Proto::TmxMap_TileImg, region_),
  PROTOBUF_FIELD_OFFSET(::Proto::TmxMap_TileImg, offset_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto::TmxMap_TileInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::TmxMap_TileInfo, gid_),
  PROTOBUF_FIELD_OFFSET(::Proto::TmxMap_TileInfo, x_),
  PROTOBUF_FIELD_OFFSET(::Proto::TmxMap_TileInfo, y_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto::TmxMap_TileSetting, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::TmxMap_TileSetting, barrertype_),
  PROTOBUF_FIELD_OFFSET(::Proto::TmxMap_TileSetting, trapindex_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto::TmxMap_Layer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::TmxMap_Layer, index_),
  PROTOBUF_FIELD_OFFSET(::Proto::TmxMap_Layer, tiles_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto::TmxMap, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::TmxMap, width_),
  PROTOBUF_FIELD_OFFSET(::Proto::TmxMap, height_),
  PROTOBUF_FIELD_OFFSET(::Proto::TmxMap, imgs_),
  PROTOBUF_FIELD_OFFSET(::Proto::TmxMap, tileimgs_),
  PROTOBUF_FIELD_OFFSET(::Proto::TmxMap, settings_),
  PROTOBUF_FIELD_OFFSET(::Proto::TmxMap, layers_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::Proto::TmxMap_Rect)},
  { 9, -1, sizeof(::Proto::TmxMap_Point)},
  { 16, -1, sizeof(::Proto::TmxMap_ImgSet)},
  { 22, -1, sizeof(::Proto::TmxMap_TileImg)},
  { 31, -1, sizeof(::Proto::TmxMap_TileInfo)},
  { 39, -1, sizeof(::Proto::TmxMap_TileSetting)},
  { 46, -1, sizeof(::Proto::TmxMap_Layer)},
  { 53, -1, sizeof(::Proto::TmxMap)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_TmxMap_Rect_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_TmxMap_Point_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_TmxMap_ImgSet_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_TmxMap_TileImg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_TmxMap_TileInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_TmxMap_TileSetting_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_TmxMap_Layer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Proto::_TmxMap_default_instance_),
};

const char descriptor_table_protodef_TmxMapMessage_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\023TmxMapMessage.proto\022\005Proto\"\272\005\n\006TmxMap\022"
  "\r\n\005width\030\001 \001(\005\022\016\n\006height\030\002 \001(\005\022\"\n\004imgs\030\003"
  " \003(\0132\024.Proto.TmxMap.ImgSet\022\'\n\010tileimgs\030\004"
  " \003(\0132\025.Proto.TmxMap.TileImg\022+\n\010settings\030"
  "\005 \003(\0132\031.Proto.TmxMap.TileSetting\022#\n\006laye"
  "rs\030\006 \003(\0132\023.Proto.TmxMap.Layer\0322\n\004Rect\022\t\n"
  "\001x\030\001 \001(\005\022\t\n\001y\030\002 \001(\005\022\t\n\001w\030\003 \001(\005\022\t\n\001h\030\004 \001("
  "\005\032\035\n\005Point\022\t\n\001x\030\001 \001(\005\022\t\n\001y\030\002 \001(\005\032\026\n\006ImgS"
  "et\022\014\n\004path\030\001 \001(\t\032q\n\007TileImg\022\013\n\003gid\030\001 \001(\005"
  "\022\020\n\010imgindex\030\002 \001(\005\022\"\n\006region\030\003 \001(\0132\022.Pro"
  "to.TmxMap.Rect\022#\n\006offset\030\004 \001(\0132\023.Proto.T"
  "mxMap.Point\032-\n\010TileInfo\022\013\n\003gid\030\001 \001(\005\022\t\n\001"
  "x\030\002 \001(\005\022\t\n\001y\030\003 \001(\005\032N\n\013TileSetting\022,\n\nbar"
  "rertype\030\001 \001(\0162\030.Proto.TmxMap.BarrerType\022"
  "\021\n\ttrapindex\030\002 \001(\005\032=\n\005Layer\022\r\n\005index\030\001 \001"
  "(\005\022%\n\005tiles\030\002 \003(\0132\026.Proto.TmxMap.TileInf"
  "o\"V\n\nBarrerType\022\010\n\004None\020\000\022\014\n\010Obstacle\020\001\022"
  "\023\n\017CanOverObstacle\020\002\022\t\n\005Trans\020\003\022\020\n\014CanOV"
  "erTrans\020\004b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_TmxMapMessage_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_TmxMapMessage_2eproto_sccs[8] = {
  &scc_info_TmxMap_TmxMapMessage_2eproto.base,
  &scc_info_TmxMap_ImgSet_TmxMapMessage_2eproto.base,
  &scc_info_TmxMap_Layer_TmxMapMessage_2eproto.base,
  &scc_info_TmxMap_Point_TmxMapMessage_2eproto.base,
  &scc_info_TmxMap_Rect_TmxMapMessage_2eproto.base,
  &scc_info_TmxMap_TileImg_TmxMapMessage_2eproto.base,
  &scc_info_TmxMap_TileInfo_TmxMapMessage_2eproto.base,
  &scc_info_TmxMap_TileSetting_TmxMapMessage_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_TmxMapMessage_2eproto_once;
static bool descriptor_table_TmxMapMessage_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_TmxMapMessage_2eproto = {
  &descriptor_table_TmxMapMessage_2eproto_initialized, descriptor_table_protodef_TmxMapMessage_2eproto, "TmxMapMessage.proto", 737,
  &descriptor_table_TmxMapMessage_2eproto_once, descriptor_table_TmxMapMessage_2eproto_sccs, descriptor_table_TmxMapMessage_2eproto_deps, 8, 0,
  schemas, file_default_instances, TableStruct_TmxMapMessage_2eproto::offsets,
  file_level_metadata_TmxMapMessage_2eproto, 8, file_level_enum_descriptors_TmxMapMessage_2eproto, file_level_service_descriptors_TmxMapMessage_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_TmxMapMessage_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_TmxMapMessage_2eproto), true);
namespace Proto {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TmxMap_BarrerType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TmxMapMessage_2eproto);
  return file_level_enum_descriptors_TmxMapMessage_2eproto[0];
}
bool TmxMap_BarrerType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr TmxMap_BarrerType TmxMap::None;
constexpr TmxMap_BarrerType TmxMap::Obstacle;
constexpr TmxMap_BarrerType TmxMap::CanOverObstacle;
constexpr TmxMap_BarrerType TmxMap::Trans;
constexpr TmxMap_BarrerType TmxMap::CanOVerTrans;
constexpr TmxMap_BarrerType TmxMap::BarrerType_MIN;
constexpr TmxMap_BarrerType TmxMap::BarrerType_MAX;
constexpr int TmxMap::BarrerType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void TmxMap_Rect::InitAsDefaultInstance() {
}
class TmxMap_Rect::_Internal {
 public:
};

TmxMap_Rect::TmxMap_Rect()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Proto.TmxMap.Rect)
}
TmxMap_Rect::TmxMap_Rect(const TmxMap_Rect& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&h_) -
    reinterpret_cast<char*>(&x_)) + sizeof(h_));
  // @@protoc_insertion_point(copy_constructor:Proto.TmxMap.Rect)
}

void TmxMap_Rect::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&h_) -
      reinterpret_cast<char*>(&x_)) + sizeof(h_));
}

TmxMap_Rect::~TmxMap_Rect() {
  // @@protoc_insertion_point(destructor:Proto.TmxMap.Rect)
  SharedDtor();
}

void TmxMap_Rect::SharedDtor() {
}

void TmxMap_Rect::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TmxMap_Rect& TmxMap_Rect::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TmxMap_Rect_TmxMapMessage_2eproto.base);
  return *internal_default_instance();
}


void TmxMap_Rect::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.TmxMap.Rect)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&h_) -
      reinterpret_cast<char*>(&x_)) + sizeof(h_));
  _internal_metadata_.Clear();
}

const char* TmxMap_Rect::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 w = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          w_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 h = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          h_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TmxMap_Rect::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.TmxMap.Rect)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 x = 1;
  if (this->x() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_x(), target);
  }

  // int32 y = 2;
  if (this->y() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_y(), target);
  }

  // int32 w = 3;
  if (this->w() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_w(), target);
  }

  // int32 h = 4;
  if (this->h() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_h(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.TmxMap.Rect)
  return target;
}

size_t TmxMap_Rect::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.TmxMap.Rect)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 x = 1;
  if (this->x() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_x());
  }

  // int32 y = 2;
  if (this->y() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_y());
  }

  // int32 w = 3;
  if (this->w() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_w());
  }

  // int32 h = 4;
  if (this->h() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_h());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TmxMap_Rect::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.TmxMap.Rect)
  GOOGLE_DCHECK_NE(&from, this);
  const TmxMap_Rect* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TmxMap_Rect>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.TmxMap.Rect)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.TmxMap.Rect)
    MergeFrom(*source);
  }
}

void TmxMap_Rect::MergeFrom(const TmxMap_Rect& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.TmxMap.Rect)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.x() != 0) {
    _internal_set_x(from._internal_x());
  }
  if (from.y() != 0) {
    _internal_set_y(from._internal_y());
  }
  if (from.w() != 0) {
    _internal_set_w(from._internal_w());
  }
  if (from.h() != 0) {
    _internal_set_h(from._internal_h());
  }
}

void TmxMap_Rect::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.TmxMap.Rect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TmxMap_Rect::CopyFrom(const TmxMap_Rect& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.TmxMap.Rect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TmxMap_Rect::IsInitialized() const {
  return true;
}

void TmxMap_Rect::InternalSwap(TmxMap_Rect* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(w_, other->w_);
  swap(h_, other->h_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TmxMap_Rect::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TmxMap_Point::InitAsDefaultInstance() {
}
class TmxMap_Point::_Internal {
 public:
};

TmxMap_Point::TmxMap_Point()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Proto.TmxMap.Point)
}
TmxMap_Point::TmxMap_Point(const TmxMap_Point& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:Proto.TmxMap.Point)
}

void TmxMap_Point::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
}

TmxMap_Point::~TmxMap_Point() {
  // @@protoc_insertion_point(destructor:Proto.TmxMap.Point)
  SharedDtor();
}

void TmxMap_Point::SharedDtor() {
}

void TmxMap_Point::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TmxMap_Point& TmxMap_Point::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TmxMap_Point_TmxMapMessage_2eproto.base);
  return *internal_default_instance();
}


void TmxMap_Point::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.TmxMap.Point)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
  _internal_metadata_.Clear();
}

const char* TmxMap_Point::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TmxMap_Point::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.TmxMap.Point)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 x = 1;
  if (this->x() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_x(), target);
  }

  // int32 y = 2;
  if (this->y() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.TmxMap.Point)
  return target;
}

size_t TmxMap_Point::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.TmxMap.Point)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 x = 1;
  if (this->x() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_x());
  }

  // int32 y = 2;
  if (this->y() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_y());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TmxMap_Point::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.TmxMap.Point)
  GOOGLE_DCHECK_NE(&from, this);
  const TmxMap_Point* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TmxMap_Point>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.TmxMap.Point)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.TmxMap.Point)
    MergeFrom(*source);
  }
}

void TmxMap_Point::MergeFrom(const TmxMap_Point& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.TmxMap.Point)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.x() != 0) {
    _internal_set_x(from._internal_x());
  }
  if (from.y() != 0) {
    _internal_set_y(from._internal_y());
  }
}

void TmxMap_Point::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.TmxMap.Point)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TmxMap_Point::CopyFrom(const TmxMap_Point& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.TmxMap.Point)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TmxMap_Point::IsInitialized() const {
  return true;
}

void TmxMap_Point::InternalSwap(TmxMap_Point* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(x_, other->x_);
  swap(y_, other->y_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TmxMap_Point::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TmxMap_ImgSet::InitAsDefaultInstance() {
}
class TmxMap_ImgSet::_Internal {
 public:
};

TmxMap_ImgSet::TmxMap_ImgSet()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Proto.TmxMap.ImgSet)
}
TmxMap_ImgSet::TmxMap_ImgSet(const TmxMap_ImgSet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_path().empty()) {
    path_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  // @@protoc_insertion_point(copy_constructor:Proto.TmxMap.ImgSet)
}

void TmxMap_ImgSet::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TmxMap_ImgSet_TmxMapMessage_2eproto.base);
  path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

TmxMap_ImgSet::~TmxMap_ImgSet() {
  // @@protoc_insertion_point(destructor:Proto.TmxMap.ImgSet)
  SharedDtor();
}

void TmxMap_ImgSet::SharedDtor() {
  path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TmxMap_ImgSet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TmxMap_ImgSet& TmxMap_ImgSet::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TmxMap_ImgSet_TmxMapMessage_2eproto.base);
  return *internal_default_instance();
}


void TmxMap_ImgSet::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.TmxMap.ImgSet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* TmxMap_ImgSet::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Proto.TmxMap.ImgSet.path"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TmxMap_ImgSet::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.TmxMap.ImgSet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string path = 1;
  if (this->path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_path().data(), static_cast<int>(this->_internal_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Proto.TmxMap.ImgSet.path");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_path(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.TmxMap.ImgSet)
  return target;
}

size_t TmxMap_ImgSet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.TmxMap.ImgSet)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string path = 1;
  if (this->path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_path());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TmxMap_ImgSet::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.TmxMap.ImgSet)
  GOOGLE_DCHECK_NE(&from, this);
  const TmxMap_ImgSet* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TmxMap_ImgSet>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.TmxMap.ImgSet)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.TmxMap.ImgSet)
    MergeFrom(*source);
  }
}

void TmxMap_ImgSet::MergeFrom(const TmxMap_ImgSet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.TmxMap.ImgSet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.path().size() > 0) {

    path_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
}

void TmxMap_ImgSet::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.TmxMap.ImgSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TmxMap_ImgSet::CopyFrom(const TmxMap_ImgSet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.TmxMap.ImgSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TmxMap_ImgSet::IsInitialized() const {
  return true;
}

void TmxMap_ImgSet::InternalSwap(TmxMap_ImgSet* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  path_.Swap(&other->path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata TmxMap_ImgSet::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TmxMap_TileImg::InitAsDefaultInstance() {
  ::Proto::_TmxMap_TileImg_default_instance_._instance.get_mutable()->region_ = const_cast< ::Proto::TmxMap_Rect*>(
      ::Proto::TmxMap_Rect::internal_default_instance());
  ::Proto::_TmxMap_TileImg_default_instance_._instance.get_mutable()->offset_ = const_cast< ::Proto::TmxMap_Point*>(
      ::Proto::TmxMap_Point::internal_default_instance());
}
class TmxMap_TileImg::_Internal {
 public:
  static const ::Proto::TmxMap_Rect& region(const TmxMap_TileImg* msg);
  static const ::Proto::TmxMap_Point& offset(const TmxMap_TileImg* msg);
};

const ::Proto::TmxMap_Rect&
TmxMap_TileImg::_Internal::region(const TmxMap_TileImg* msg) {
  return *msg->region_;
}
const ::Proto::TmxMap_Point&
TmxMap_TileImg::_Internal::offset(const TmxMap_TileImg* msg) {
  return *msg->offset_;
}
TmxMap_TileImg::TmxMap_TileImg()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Proto.TmxMap.TileImg)
}
TmxMap_TileImg::TmxMap_TileImg(const TmxMap_TileImg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_region()) {
    region_ = new ::Proto::TmxMap_Rect(*from.region_);
  } else {
    region_ = nullptr;
  }
  if (from._internal_has_offset()) {
    offset_ = new ::Proto::TmxMap_Point(*from.offset_);
  } else {
    offset_ = nullptr;
  }
  ::memcpy(&gid_, &from.gid_,
    static_cast<size_t>(reinterpret_cast<char*>(&imgindex_) -
    reinterpret_cast<char*>(&gid_)) + sizeof(imgindex_));
  // @@protoc_insertion_point(copy_constructor:Proto.TmxMap.TileImg)
}

void TmxMap_TileImg::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TmxMap_TileImg_TmxMapMessage_2eproto.base);
  ::memset(&region_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&imgindex_) -
      reinterpret_cast<char*>(&region_)) + sizeof(imgindex_));
}

TmxMap_TileImg::~TmxMap_TileImg() {
  // @@protoc_insertion_point(destructor:Proto.TmxMap.TileImg)
  SharedDtor();
}

void TmxMap_TileImg::SharedDtor() {
  if (this != internal_default_instance()) delete region_;
  if (this != internal_default_instance()) delete offset_;
}

void TmxMap_TileImg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TmxMap_TileImg& TmxMap_TileImg::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TmxMap_TileImg_TmxMapMessage_2eproto.base);
  return *internal_default_instance();
}


void TmxMap_TileImg::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.TmxMap.TileImg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && region_ != nullptr) {
    delete region_;
  }
  region_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && offset_ != nullptr) {
    delete offset_;
  }
  offset_ = nullptr;
  ::memset(&gid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&imgindex_) -
      reinterpret_cast<char*>(&gid_)) + sizeof(imgindex_));
  _internal_metadata_.Clear();
}

const char* TmxMap_TileImg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 gid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          gid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 imgindex = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          imgindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Proto.TmxMap.Rect region = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_region(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Proto.TmxMap.Point offset = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_offset(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TmxMap_TileImg::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.TmxMap.TileImg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 gid = 1;
  if (this->gid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_gid(), target);
  }

  // int32 imgindex = 2;
  if (this->imgindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_imgindex(), target);
  }

  // .Proto.TmxMap.Rect region = 3;
  if (this->has_region()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::region(this), target, stream);
  }

  // .Proto.TmxMap.Point offset = 4;
  if (this->has_offset()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::offset(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.TmxMap.TileImg)
  return target;
}

size_t TmxMap_TileImg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.TmxMap.TileImg)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Proto.TmxMap.Rect region = 3;
  if (this->has_region()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *region_);
  }

  // .Proto.TmxMap.Point offset = 4;
  if (this->has_offset()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *offset_);
  }

  // int32 gid = 1;
  if (this->gid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_gid());
  }

  // int32 imgindex = 2;
  if (this->imgindex() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_imgindex());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TmxMap_TileImg::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.TmxMap.TileImg)
  GOOGLE_DCHECK_NE(&from, this);
  const TmxMap_TileImg* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TmxMap_TileImg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.TmxMap.TileImg)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.TmxMap.TileImg)
    MergeFrom(*source);
  }
}

void TmxMap_TileImg::MergeFrom(const TmxMap_TileImg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.TmxMap.TileImg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_region()) {
    _internal_mutable_region()->::Proto::TmxMap_Rect::MergeFrom(from._internal_region());
  }
  if (from.has_offset()) {
    _internal_mutable_offset()->::Proto::TmxMap_Point::MergeFrom(from._internal_offset());
  }
  if (from.gid() != 0) {
    _internal_set_gid(from._internal_gid());
  }
  if (from.imgindex() != 0) {
    _internal_set_imgindex(from._internal_imgindex());
  }
}

void TmxMap_TileImg::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.TmxMap.TileImg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TmxMap_TileImg::CopyFrom(const TmxMap_TileImg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.TmxMap.TileImg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TmxMap_TileImg::IsInitialized() const {
  return true;
}

void TmxMap_TileImg::InternalSwap(TmxMap_TileImg* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(region_, other->region_);
  swap(offset_, other->offset_);
  swap(gid_, other->gid_);
  swap(imgindex_, other->imgindex_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TmxMap_TileImg::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TmxMap_TileInfo::InitAsDefaultInstance() {
}
class TmxMap_TileInfo::_Internal {
 public:
};

TmxMap_TileInfo::TmxMap_TileInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Proto.TmxMap.TileInfo)
}
TmxMap_TileInfo::TmxMap_TileInfo(const TmxMap_TileInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&gid_, &from.gid_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&gid_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:Proto.TmxMap.TileInfo)
}

void TmxMap_TileInfo::SharedCtor() {
  ::memset(&gid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&gid_)) + sizeof(y_));
}

TmxMap_TileInfo::~TmxMap_TileInfo() {
  // @@protoc_insertion_point(destructor:Proto.TmxMap.TileInfo)
  SharedDtor();
}

void TmxMap_TileInfo::SharedDtor() {
}

void TmxMap_TileInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TmxMap_TileInfo& TmxMap_TileInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TmxMap_TileInfo_TmxMapMessage_2eproto.base);
  return *internal_default_instance();
}


void TmxMap_TileInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.TmxMap.TileInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&gid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&gid_)) + sizeof(y_));
  _internal_metadata_.Clear();
}

const char* TmxMap_TileInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 gid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          gid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 x = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 y = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TmxMap_TileInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.TmxMap.TileInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 gid = 1;
  if (this->gid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_gid(), target);
  }

  // int32 x = 2;
  if (this->x() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_x(), target);
  }

  // int32 y = 3;
  if (this->y() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.TmxMap.TileInfo)
  return target;
}

size_t TmxMap_TileInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.TmxMap.TileInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 gid = 1;
  if (this->gid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_gid());
  }

  // int32 x = 2;
  if (this->x() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_x());
  }

  // int32 y = 3;
  if (this->y() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_y());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TmxMap_TileInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.TmxMap.TileInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const TmxMap_TileInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TmxMap_TileInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.TmxMap.TileInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.TmxMap.TileInfo)
    MergeFrom(*source);
  }
}

void TmxMap_TileInfo::MergeFrom(const TmxMap_TileInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.TmxMap.TileInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.gid() != 0) {
    _internal_set_gid(from._internal_gid());
  }
  if (from.x() != 0) {
    _internal_set_x(from._internal_x());
  }
  if (from.y() != 0) {
    _internal_set_y(from._internal_y());
  }
}

void TmxMap_TileInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.TmxMap.TileInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TmxMap_TileInfo::CopyFrom(const TmxMap_TileInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.TmxMap.TileInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TmxMap_TileInfo::IsInitialized() const {
  return true;
}

void TmxMap_TileInfo::InternalSwap(TmxMap_TileInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(gid_, other->gid_);
  swap(x_, other->x_);
  swap(y_, other->y_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TmxMap_TileInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TmxMap_TileSetting::InitAsDefaultInstance() {
}
class TmxMap_TileSetting::_Internal {
 public:
};

TmxMap_TileSetting::TmxMap_TileSetting()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Proto.TmxMap.TileSetting)
}
TmxMap_TileSetting::TmxMap_TileSetting(const TmxMap_TileSetting& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&barrertype_, &from.barrertype_,
    static_cast<size_t>(reinterpret_cast<char*>(&trapindex_) -
    reinterpret_cast<char*>(&barrertype_)) + sizeof(trapindex_));
  // @@protoc_insertion_point(copy_constructor:Proto.TmxMap.TileSetting)
}

void TmxMap_TileSetting::SharedCtor() {
  ::memset(&barrertype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&trapindex_) -
      reinterpret_cast<char*>(&barrertype_)) + sizeof(trapindex_));
}

TmxMap_TileSetting::~TmxMap_TileSetting() {
  // @@protoc_insertion_point(destructor:Proto.TmxMap.TileSetting)
  SharedDtor();
}

void TmxMap_TileSetting::SharedDtor() {
}

void TmxMap_TileSetting::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TmxMap_TileSetting& TmxMap_TileSetting::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TmxMap_TileSetting_TmxMapMessage_2eproto.base);
  return *internal_default_instance();
}


void TmxMap_TileSetting::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.TmxMap.TileSetting)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&barrertype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&trapindex_) -
      reinterpret_cast<char*>(&barrertype_)) + sizeof(trapindex_));
  _internal_metadata_.Clear();
}

const char* TmxMap_TileSetting::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Proto.TmxMap.BarrerType barrertype = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_barrertype(static_cast<::Proto::TmxMap_BarrerType>(val));
        } else goto handle_unusual;
        continue;
      // int32 trapindex = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          trapindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TmxMap_TileSetting::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.TmxMap.TileSetting)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Proto.TmxMap.BarrerType barrertype = 1;
  if (this->barrertype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_barrertype(), target);
  }

  // int32 trapindex = 2;
  if (this->trapindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_trapindex(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.TmxMap.TileSetting)
  return target;
}

size_t TmxMap_TileSetting::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.TmxMap.TileSetting)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Proto.TmxMap.BarrerType barrertype = 1;
  if (this->barrertype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_barrertype());
  }

  // int32 trapindex = 2;
  if (this->trapindex() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_trapindex());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TmxMap_TileSetting::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.TmxMap.TileSetting)
  GOOGLE_DCHECK_NE(&from, this);
  const TmxMap_TileSetting* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TmxMap_TileSetting>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.TmxMap.TileSetting)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.TmxMap.TileSetting)
    MergeFrom(*source);
  }
}

void TmxMap_TileSetting::MergeFrom(const TmxMap_TileSetting& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.TmxMap.TileSetting)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.barrertype() != 0) {
    _internal_set_barrertype(from._internal_barrertype());
  }
  if (from.trapindex() != 0) {
    _internal_set_trapindex(from._internal_trapindex());
  }
}

void TmxMap_TileSetting::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.TmxMap.TileSetting)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TmxMap_TileSetting::CopyFrom(const TmxMap_TileSetting& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.TmxMap.TileSetting)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TmxMap_TileSetting::IsInitialized() const {
  return true;
}

void TmxMap_TileSetting::InternalSwap(TmxMap_TileSetting* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(barrertype_, other->barrertype_);
  swap(trapindex_, other->trapindex_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TmxMap_TileSetting::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TmxMap_Layer::InitAsDefaultInstance() {
}
class TmxMap_Layer::_Internal {
 public:
};

TmxMap_Layer::TmxMap_Layer()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Proto.TmxMap.Layer)
}
TmxMap_Layer::TmxMap_Layer(const TmxMap_Layer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      tiles_(from.tiles_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  index_ = from.index_;
  // @@protoc_insertion_point(copy_constructor:Proto.TmxMap.Layer)
}

void TmxMap_Layer::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TmxMap_Layer_TmxMapMessage_2eproto.base);
  index_ = 0;
}

TmxMap_Layer::~TmxMap_Layer() {
  // @@protoc_insertion_point(destructor:Proto.TmxMap.Layer)
  SharedDtor();
}

void TmxMap_Layer::SharedDtor() {
}

void TmxMap_Layer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TmxMap_Layer& TmxMap_Layer::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TmxMap_Layer_TmxMapMessage_2eproto.base);
  return *internal_default_instance();
}


void TmxMap_Layer::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.TmxMap.Layer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tiles_.Clear();
  index_ = 0;
  _internal_metadata_.Clear();
}

const char* TmxMap_Layer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .Proto.TmxMap.TileInfo tiles = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tiles(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TmxMap_Layer::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.TmxMap.Layer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 index = 1;
  if (this->index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_index(), target);
  }

  // repeated .Proto.TmxMap.TileInfo tiles = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tiles_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_tiles(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.TmxMap.Layer)
  return target;
}

size_t TmxMap_Layer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.TmxMap.Layer)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Proto.TmxMap.TileInfo tiles = 2;
  total_size += 1UL * this->_internal_tiles_size();
  for (const auto& msg : this->tiles_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 index = 1;
  if (this->index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_index());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TmxMap_Layer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.TmxMap.Layer)
  GOOGLE_DCHECK_NE(&from, this);
  const TmxMap_Layer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TmxMap_Layer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.TmxMap.Layer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.TmxMap.Layer)
    MergeFrom(*source);
  }
}

void TmxMap_Layer::MergeFrom(const TmxMap_Layer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.TmxMap.Layer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tiles_.MergeFrom(from.tiles_);
  if (from.index() != 0) {
    _internal_set_index(from._internal_index());
  }
}

void TmxMap_Layer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.TmxMap.Layer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TmxMap_Layer::CopyFrom(const TmxMap_Layer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.TmxMap.Layer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TmxMap_Layer::IsInitialized() const {
  return true;
}

void TmxMap_Layer::InternalSwap(TmxMap_Layer* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  tiles_.InternalSwap(&other->tiles_);
  swap(index_, other->index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TmxMap_Layer::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TmxMap::InitAsDefaultInstance() {
}
class TmxMap::_Internal {
 public:
};

TmxMap::TmxMap()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Proto.TmxMap)
}
TmxMap::TmxMap(const TmxMap& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      imgs_(from.imgs_),
      tileimgs_(from.tileimgs_),
      settings_(from.settings_),
      layers_(from.layers_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&width_, &from.width_,
    static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&width_)) + sizeof(height_));
  // @@protoc_insertion_point(copy_constructor:Proto.TmxMap)
}

void TmxMap::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TmxMap_TmxMapMessage_2eproto.base);
  ::memset(&width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&height_) -
      reinterpret_cast<char*>(&width_)) + sizeof(height_));
}

TmxMap::~TmxMap() {
  // @@protoc_insertion_point(destructor:Proto.TmxMap)
  SharedDtor();
}

void TmxMap::SharedDtor() {
}

void TmxMap::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TmxMap& TmxMap::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TmxMap_TmxMapMessage_2eproto.base);
  return *internal_default_instance();
}


void TmxMap::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.TmxMap)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  imgs_.Clear();
  tileimgs_.Clear();
  settings_.Clear();
  layers_.Clear();
  ::memset(&width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&height_) -
      reinterpret_cast<char*>(&width_)) + sizeof(height_));
  _internal_metadata_.Clear();
}

const char* TmxMap::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 width = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 height = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .Proto.TmxMap.ImgSet imgs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_imgs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .Proto.TmxMap.TileImg tileimgs = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tileimgs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .Proto.TmxMap.TileSetting settings = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_settings(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .Proto.TmxMap.Layer layers = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_layers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TmxMap::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto.TmxMap)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 width = 1;
  if (this->width() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_width(), target);
  }

  // int32 height = 2;
  if (this->height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_height(), target);
  }

  // repeated .Proto.TmxMap.ImgSet imgs = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_imgs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_imgs(i), target, stream);
  }

  // repeated .Proto.TmxMap.TileImg tileimgs = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tileimgs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_tileimgs(i), target, stream);
  }

  // repeated .Proto.TmxMap.TileSetting settings = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_settings_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_settings(i), target, stream);
  }

  // repeated .Proto.TmxMap.Layer layers = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_layers_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_layers(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.TmxMap)
  return target;
}

size_t TmxMap::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.TmxMap)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Proto.TmxMap.ImgSet imgs = 3;
  total_size += 1UL * this->_internal_imgs_size();
  for (const auto& msg : this->imgs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .Proto.TmxMap.TileImg tileimgs = 4;
  total_size += 1UL * this->_internal_tileimgs_size();
  for (const auto& msg : this->tileimgs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .Proto.TmxMap.TileSetting settings = 5;
  total_size += 1UL * this->_internal_settings_size();
  for (const auto& msg : this->settings_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .Proto.TmxMap.Layer layers = 6;
  total_size += 1UL * this->_internal_layers_size();
  for (const auto& msg : this->layers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 width = 1;
  if (this->width() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_width());
  }

  // int32 height = 2;
  if (this->height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_height());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TmxMap::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.TmxMap)
  GOOGLE_DCHECK_NE(&from, this);
  const TmxMap* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TmxMap>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.TmxMap)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.TmxMap)
    MergeFrom(*source);
  }
}

void TmxMap::MergeFrom(const TmxMap& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.TmxMap)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  imgs_.MergeFrom(from.imgs_);
  tileimgs_.MergeFrom(from.tileimgs_);
  settings_.MergeFrom(from.settings_);
  layers_.MergeFrom(from.layers_);
  if (from.width() != 0) {
    _internal_set_width(from._internal_width());
  }
  if (from.height() != 0) {
    _internal_set_height(from._internal_height());
  }
}

void TmxMap::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.TmxMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TmxMap::CopyFrom(const TmxMap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.TmxMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TmxMap::IsInitialized() const {
  return true;
}

void TmxMap::InternalSwap(TmxMap* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  imgs_.InternalSwap(&other->imgs_);
  tileimgs_.InternalSwap(&other->tileimgs_);
  settings_.InternalSwap(&other->settings_);
  layers_.InternalSwap(&other->layers_);
  swap(width_, other->width_);
  swap(height_, other->height_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TmxMap::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace Proto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Proto::TmxMap_Rect* Arena::CreateMaybeMessage< ::Proto::TmxMap_Rect >(Arena* arena) {
  return Arena::CreateInternal< ::Proto::TmxMap_Rect >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::TmxMap_Point* Arena::CreateMaybeMessage< ::Proto::TmxMap_Point >(Arena* arena) {
  return Arena::CreateInternal< ::Proto::TmxMap_Point >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::TmxMap_ImgSet* Arena::CreateMaybeMessage< ::Proto::TmxMap_ImgSet >(Arena* arena) {
  return Arena::CreateInternal< ::Proto::TmxMap_ImgSet >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::TmxMap_TileImg* Arena::CreateMaybeMessage< ::Proto::TmxMap_TileImg >(Arena* arena) {
  return Arena::CreateInternal< ::Proto::TmxMap_TileImg >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::TmxMap_TileInfo* Arena::CreateMaybeMessage< ::Proto::TmxMap_TileInfo >(Arena* arena) {
  return Arena::CreateInternal< ::Proto::TmxMap_TileInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::TmxMap_TileSetting* Arena::CreateMaybeMessage< ::Proto::TmxMap_TileSetting >(Arena* arena) {
  return Arena::CreateInternal< ::Proto::TmxMap_TileSetting >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::TmxMap_Layer* Arena::CreateMaybeMessage< ::Proto::TmxMap_Layer >(Arena* arena) {
  return Arena::CreateInternal< ::Proto::TmxMap_Layer >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::TmxMap* Arena::CreateMaybeMessage< ::Proto::TmxMap >(Arena* arena) {
  return Arena::CreateInternal< ::Proto::TmxMap >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
