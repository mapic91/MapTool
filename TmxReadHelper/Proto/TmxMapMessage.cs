// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: TmxMapMessage.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Proto {

  /// <summary>Holder for reflection information generated from TmxMapMessage.proto</summary>
  public static partial class TmxMapMessageReflection {

    #region Descriptor
    /// <summary>File descriptor for TmxMapMessage.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static TmxMapMessageReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChNUbXhNYXBNZXNzYWdlLnByb3RvEgVQcm90byK6BQoGVG14TWFwEg0KBXdp",
            "ZHRoGAEgASgFEg4KBmhlaWdodBgCIAEoBRIiCgRpbWdzGAMgAygLMhQuUHJv",
            "dG8uVG14TWFwLkltZ1NldBInCgh0aWxlaW1ncxgEIAMoCzIVLlByb3RvLlRt",
            "eE1hcC5UaWxlSW1nEisKCHNldHRpbmdzGAUgAygLMhkuUHJvdG8uVG14TWFw",
            "LlRpbGVTZXR0aW5nEiMKBmxheWVycxgGIAMoCzITLlByb3RvLlRteE1hcC5M",
            "YXllchoyCgRSZWN0EgkKAXgYASABKAUSCQoBeRgCIAEoBRIJCgF3GAMgASgF",
            "EgkKAWgYBCABKAUaHQoFUG9pbnQSCQoBeBgBIAEoBRIJCgF5GAIgASgFGhYK",
            "BkltZ1NldBIMCgRwYXRoGAEgASgJGnEKB1RpbGVJbWcSCwoDZ2lkGAEgASgF",
            "EhAKCGltZ2luZGV4GAIgASgFEiIKBnJlZ2lvbhgDIAEoCzISLlByb3RvLlRt",
            "eE1hcC5SZWN0EiMKBm9mZnNldBgEIAEoCzITLlByb3RvLlRteE1hcC5Qb2lu",
            "dBotCghUaWxlSW5mbxILCgNnaWQYASABKAUSCQoBeBgCIAEoBRIJCgF5GAMg",
            "ASgFGk4KC1RpbGVTZXR0aW5nEiwKCmJhcnJlcnR5cGUYASABKA4yGC5Qcm90",
            "by5UbXhNYXAuQmFycmVyVHlwZRIRCgl0cmFwaW5kZXgYAiABKAUaPQoFTGF5",
            "ZXISDQoFaW5kZXgYASABKAUSJQoFdGlsZXMYAiADKAsyFi5Qcm90by5UbXhN",
            "YXAuVGlsZUluZm8iVgoKQmFycmVyVHlwZRIICgROb25lEAASDAoIT2JzdGFj",
            "bGUQARITCg9DYW5PdmVyT2JzdGFjbGUQAhIJCgVUcmFucxADEhAKDENhbk9W",
            "ZXJUcmFucxAEYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.TmxMap), global::Proto.TmxMap.Parser, new[]{ "Width", "Height", "Imgs", "Tileimgs", "Settings", "Layers" }, null, new[]{ typeof(global::Proto.TmxMap.Types.BarrerType) }, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Proto.TmxMap.Types.Rect), global::Proto.TmxMap.Types.Rect.Parser, new[]{ "X", "Y", "W", "H" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.TmxMap.Types.Point), global::Proto.TmxMap.Types.Point.Parser, new[]{ "X", "Y" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.TmxMap.Types.ImgSet), global::Proto.TmxMap.Types.ImgSet.Parser, new[]{ "Path" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.TmxMap.Types.TileImg), global::Proto.TmxMap.Types.TileImg.Parser, new[]{ "Gid", "Imgindex", "Region", "Offset" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.TmxMap.Types.TileInfo), global::Proto.TmxMap.Types.TileInfo.Parser, new[]{ "Gid", "X", "Y" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.TmxMap.Types.TileSetting), global::Proto.TmxMap.Types.TileSetting.Parser, new[]{ "Barrertype", "Trapindex" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.TmxMap.Types.Layer), global::Proto.TmxMap.Types.Layer.Parser, new[]{ "Index", "Tiles" }, null, null, null, null)})
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class TmxMap : pb::IMessage<TmxMap> {
    private static readonly pb::MessageParser<TmxMap> _parser = new pb::MessageParser<TmxMap>(() => new TmxMap());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TmxMap> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.TmxMapMessageReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TmxMap() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TmxMap(TmxMap other) : this() {
      width_ = other.width_;
      height_ = other.height_;
      imgs_ = other.imgs_.Clone();
      tileimgs_ = other.tileimgs_.Clone();
      settings_ = other.settings_.Clone();
      layers_ = other.layers_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TmxMap Clone() {
      return new TmxMap(this);
    }

    /// <summary>Field number for the "width" field.</summary>
    public const int WidthFieldNumber = 1;
    private int width_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Width {
      get { return width_; }
      set {
        width_ = value;
      }
    }

    /// <summary>Field number for the "height" field.</summary>
    public const int HeightFieldNumber = 2;
    private int height_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Height {
      get { return height_; }
      set {
        height_ = value;
      }
    }

    /// <summary>Field number for the "imgs" field.</summary>
    public const int ImgsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Proto.TmxMap.Types.ImgSet> _repeated_imgs_codec
        = pb::FieldCodec.ForMessage(26, global::Proto.TmxMap.Types.ImgSet.Parser);
    private readonly pbc::RepeatedField<global::Proto.TmxMap.Types.ImgSet> imgs_ = new pbc::RepeatedField<global::Proto.TmxMap.Types.ImgSet>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Proto.TmxMap.Types.ImgSet> Imgs {
      get { return imgs_; }
    }

    /// <summary>Field number for the "tileimgs" field.</summary>
    public const int TileimgsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Proto.TmxMap.Types.TileImg> _repeated_tileimgs_codec
        = pb::FieldCodec.ForMessage(34, global::Proto.TmxMap.Types.TileImg.Parser);
    private readonly pbc::RepeatedField<global::Proto.TmxMap.Types.TileImg> tileimgs_ = new pbc::RepeatedField<global::Proto.TmxMap.Types.TileImg>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Proto.TmxMap.Types.TileImg> Tileimgs {
      get { return tileimgs_; }
    }

    /// <summary>Field number for the "settings" field.</summary>
    public const int SettingsFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Proto.TmxMap.Types.TileSetting> _repeated_settings_codec
        = pb::FieldCodec.ForMessage(42, global::Proto.TmxMap.Types.TileSetting.Parser);
    private readonly pbc::RepeatedField<global::Proto.TmxMap.Types.TileSetting> settings_ = new pbc::RepeatedField<global::Proto.TmxMap.Types.TileSetting>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Proto.TmxMap.Types.TileSetting> Settings {
      get { return settings_; }
    }

    /// <summary>Field number for the "layers" field.</summary>
    public const int LayersFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Proto.TmxMap.Types.Layer> _repeated_layers_codec
        = pb::FieldCodec.ForMessage(50, global::Proto.TmxMap.Types.Layer.Parser);
    private readonly pbc::RepeatedField<global::Proto.TmxMap.Types.Layer> layers_ = new pbc::RepeatedField<global::Proto.TmxMap.Types.Layer>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Proto.TmxMap.Types.Layer> Layers {
      get { return layers_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TmxMap);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TmxMap other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Width != other.Width) return false;
      if (Height != other.Height) return false;
      if(!imgs_.Equals(other.imgs_)) return false;
      if(!tileimgs_.Equals(other.tileimgs_)) return false;
      if(!settings_.Equals(other.settings_)) return false;
      if(!layers_.Equals(other.layers_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Width != 0) hash ^= Width.GetHashCode();
      if (Height != 0) hash ^= Height.GetHashCode();
      hash ^= imgs_.GetHashCode();
      hash ^= tileimgs_.GetHashCode();
      hash ^= settings_.GetHashCode();
      hash ^= layers_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Width != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Width);
      }
      if (Height != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Height);
      }
      imgs_.WriteTo(output, _repeated_imgs_codec);
      tileimgs_.WriteTo(output, _repeated_tileimgs_codec);
      settings_.WriteTo(output, _repeated_settings_codec);
      layers_.WriteTo(output, _repeated_layers_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Width != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Width);
      }
      if (Height != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Height);
      }
      size += imgs_.CalculateSize(_repeated_imgs_codec);
      size += tileimgs_.CalculateSize(_repeated_tileimgs_codec);
      size += settings_.CalculateSize(_repeated_settings_codec);
      size += layers_.CalculateSize(_repeated_layers_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TmxMap other) {
      if (other == null) {
        return;
      }
      if (other.Width != 0) {
        Width = other.Width;
      }
      if (other.Height != 0) {
        Height = other.Height;
      }
      imgs_.Add(other.imgs_);
      tileimgs_.Add(other.tileimgs_);
      settings_.Add(other.settings_);
      layers_.Add(other.layers_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Width = input.ReadInt32();
            break;
          }
          case 16: {
            Height = input.ReadInt32();
            break;
          }
          case 26: {
            imgs_.AddEntriesFrom(input, _repeated_imgs_codec);
            break;
          }
          case 34: {
            tileimgs_.AddEntriesFrom(input, _repeated_tileimgs_codec);
            break;
          }
          case 42: {
            settings_.AddEntriesFrom(input, _repeated_settings_codec);
            break;
          }
          case 50: {
            layers_.AddEntriesFrom(input, _repeated_layers_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the TmxMap message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum BarrerType {
        [pbr::OriginalName("None")] None = 0,
        [pbr::OriginalName("Obstacle")] Obstacle = 1,
        [pbr::OriginalName("CanOverObstacle")] CanOverObstacle = 2,
        [pbr::OriginalName("Trans")] Trans = 3,
        [pbr::OriginalName("CanOVerTrans")] CanOverTrans = 4,
      }

      public sealed partial class Rect : pb::IMessage<Rect> {
        private static readonly pb::MessageParser<Rect> _parser = new pb::MessageParser<Rect>(() => new Rect());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Rect> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Proto.TmxMap.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Rect() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Rect(Rect other) : this() {
          x_ = other.x_;
          y_ = other.y_;
          w_ = other.w_;
          h_ = other.h_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Rect Clone() {
          return new Rect(this);
        }

        /// <summary>Field number for the "x" field.</summary>
        public const int XFieldNumber = 1;
        private int x_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int X {
          get { return x_; }
          set {
            x_ = value;
          }
        }

        /// <summary>Field number for the "y" field.</summary>
        public const int YFieldNumber = 2;
        private int y_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Y {
          get { return y_; }
          set {
            y_ = value;
          }
        }

        /// <summary>Field number for the "w" field.</summary>
        public const int WFieldNumber = 3;
        private int w_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int W {
          get { return w_; }
          set {
            w_ = value;
          }
        }

        /// <summary>Field number for the "h" field.</summary>
        public const int HFieldNumber = 4;
        private int h_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int H {
          get { return h_; }
          set {
            h_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Rect);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Rect other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (X != other.X) return false;
          if (Y != other.Y) return false;
          if (W != other.W) return false;
          if (H != other.H) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (X != 0) hash ^= X.GetHashCode();
          if (Y != 0) hash ^= Y.GetHashCode();
          if (W != 0) hash ^= W.GetHashCode();
          if (H != 0) hash ^= H.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (X != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(X);
          }
          if (Y != 0) {
            output.WriteRawTag(16);
            output.WriteInt32(Y);
          }
          if (W != 0) {
            output.WriteRawTag(24);
            output.WriteInt32(W);
          }
          if (H != 0) {
            output.WriteRawTag(32);
            output.WriteInt32(H);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (X != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(X);
          }
          if (Y != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Y);
          }
          if (W != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(W);
          }
          if (H != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(H);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Rect other) {
          if (other == null) {
            return;
          }
          if (other.X != 0) {
            X = other.X;
          }
          if (other.Y != 0) {
            Y = other.Y;
          }
          if (other.W != 0) {
            W = other.W;
          }
          if (other.H != 0) {
            H = other.H;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                X = input.ReadInt32();
                break;
              }
              case 16: {
                Y = input.ReadInt32();
                break;
              }
              case 24: {
                W = input.ReadInt32();
                break;
              }
              case 32: {
                H = input.ReadInt32();
                break;
              }
            }
          }
        }

      }

      public sealed partial class Point : pb::IMessage<Point> {
        private static readonly pb::MessageParser<Point> _parser = new pb::MessageParser<Point>(() => new Point());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Point> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Proto.TmxMap.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Point() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Point(Point other) : this() {
          x_ = other.x_;
          y_ = other.y_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Point Clone() {
          return new Point(this);
        }

        /// <summary>Field number for the "x" field.</summary>
        public const int XFieldNumber = 1;
        private int x_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int X {
          get { return x_; }
          set {
            x_ = value;
          }
        }

        /// <summary>Field number for the "y" field.</summary>
        public const int YFieldNumber = 2;
        private int y_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Y {
          get { return y_; }
          set {
            y_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Point);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Point other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (X != other.X) return false;
          if (Y != other.Y) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (X != 0) hash ^= X.GetHashCode();
          if (Y != 0) hash ^= Y.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (X != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(X);
          }
          if (Y != 0) {
            output.WriteRawTag(16);
            output.WriteInt32(Y);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (X != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(X);
          }
          if (Y != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Y);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Point other) {
          if (other == null) {
            return;
          }
          if (other.X != 0) {
            X = other.X;
          }
          if (other.Y != 0) {
            Y = other.Y;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                X = input.ReadInt32();
                break;
              }
              case 16: {
                Y = input.ReadInt32();
                break;
              }
            }
          }
        }

      }

      public sealed partial class ImgSet : pb::IMessage<ImgSet> {
        private static readonly pb::MessageParser<ImgSet> _parser = new pb::MessageParser<ImgSet>(() => new ImgSet());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ImgSet> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Proto.TmxMap.Descriptor.NestedTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ImgSet() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ImgSet(ImgSet other) : this() {
          path_ = other.path_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ImgSet Clone() {
          return new ImgSet(this);
        }

        /// <summary>Field number for the "path" field.</summary>
        public const int PathFieldNumber = 1;
        private string path_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Path {
          get { return path_; }
          set {
            path_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as ImgSet);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ImgSet other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Path != other.Path) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Path.Length != 0) hash ^= Path.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Path.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Path);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Path.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Path);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ImgSet other) {
          if (other == null) {
            return;
          }
          if (other.Path.Length != 0) {
            Path = other.Path;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Path = input.ReadString();
                break;
              }
            }
          }
        }

      }

      public sealed partial class TileImg : pb::IMessage<TileImg> {
        private static readonly pb::MessageParser<TileImg> _parser = new pb::MessageParser<TileImg>(() => new TileImg());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<TileImg> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Proto.TmxMap.Descriptor.NestedTypes[3]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TileImg() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TileImg(TileImg other) : this() {
          gid_ = other.gid_;
          imgindex_ = other.imgindex_;
          region_ = other.region_ != null ? other.region_.Clone() : null;
          offset_ = other.offset_ != null ? other.offset_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TileImg Clone() {
          return new TileImg(this);
        }

        /// <summary>Field number for the "gid" field.</summary>
        public const int GidFieldNumber = 1;
        private int gid_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Gid {
          get { return gid_; }
          set {
            gid_ = value;
          }
        }

        /// <summary>Field number for the "imgindex" field.</summary>
        public const int ImgindexFieldNumber = 2;
        private int imgindex_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Imgindex {
          get { return imgindex_; }
          set {
            imgindex_ = value;
          }
        }

        /// <summary>Field number for the "region" field.</summary>
        public const int RegionFieldNumber = 3;
        private global::Proto.TmxMap.Types.Rect region_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Proto.TmxMap.Types.Rect Region {
          get { return region_; }
          set {
            region_ = value;
          }
        }

        /// <summary>Field number for the "offset" field.</summary>
        public const int OffsetFieldNumber = 4;
        private global::Proto.TmxMap.Types.Point offset_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Proto.TmxMap.Types.Point Offset {
          get { return offset_; }
          set {
            offset_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as TileImg);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(TileImg other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Gid != other.Gid) return false;
          if (Imgindex != other.Imgindex) return false;
          if (!object.Equals(Region, other.Region)) return false;
          if (!object.Equals(Offset, other.Offset)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Gid != 0) hash ^= Gid.GetHashCode();
          if (Imgindex != 0) hash ^= Imgindex.GetHashCode();
          if (region_ != null) hash ^= Region.GetHashCode();
          if (offset_ != null) hash ^= Offset.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Gid != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(Gid);
          }
          if (Imgindex != 0) {
            output.WriteRawTag(16);
            output.WriteInt32(Imgindex);
          }
          if (region_ != null) {
            output.WriteRawTag(26);
            output.WriteMessage(Region);
          }
          if (offset_ != null) {
            output.WriteRawTag(34);
            output.WriteMessage(Offset);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Gid != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Gid);
          }
          if (Imgindex != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Imgindex);
          }
          if (region_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Region);
          }
          if (offset_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Offset);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(TileImg other) {
          if (other == null) {
            return;
          }
          if (other.Gid != 0) {
            Gid = other.Gid;
          }
          if (other.Imgindex != 0) {
            Imgindex = other.Imgindex;
          }
          if (other.region_ != null) {
            if (region_ == null) {
              Region = new global::Proto.TmxMap.Types.Rect();
            }
            Region.MergeFrom(other.Region);
          }
          if (other.offset_ != null) {
            if (offset_ == null) {
              Offset = new global::Proto.TmxMap.Types.Point();
            }
            Offset.MergeFrom(other.Offset);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Gid = input.ReadInt32();
                break;
              }
              case 16: {
                Imgindex = input.ReadInt32();
                break;
              }
              case 26: {
                if (region_ == null) {
                  Region = new global::Proto.TmxMap.Types.Rect();
                }
                input.ReadMessage(Region);
                break;
              }
              case 34: {
                if (offset_ == null) {
                  Offset = new global::Proto.TmxMap.Types.Point();
                }
                input.ReadMessage(Offset);
                break;
              }
            }
          }
        }

      }

      public sealed partial class TileInfo : pb::IMessage<TileInfo> {
        private static readonly pb::MessageParser<TileInfo> _parser = new pb::MessageParser<TileInfo>(() => new TileInfo());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<TileInfo> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Proto.TmxMap.Descriptor.NestedTypes[4]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TileInfo() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TileInfo(TileInfo other) : this() {
          gid_ = other.gid_;
          x_ = other.x_;
          y_ = other.y_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TileInfo Clone() {
          return new TileInfo(this);
        }

        /// <summary>Field number for the "gid" field.</summary>
        public const int GidFieldNumber = 1;
        private int gid_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Gid {
          get { return gid_; }
          set {
            gid_ = value;
          }
        }

        /// <summary>Field number for the "x" field.</summary>
        public const int XFieldNumber = 2;
        private int x_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int X {
          get { return x_; }
          set {
            x_ = value;
          }
        }

        /// <summary>Field number for the "y" field.</summary>
        public const int YFieldNumber = 3;
        private int y_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Y {
          get { return y_; }
          set {
            y_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as TileInfo);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(TileInfo other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Gid != other.Gid) return false;
          if (X != other.X) return false;
          if (Y != other.Y) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Gid != 0) hash ^= Gid.GetHashCode();
          if (X != 0) hash ^= X.GetHashCode();
          if (Y != 0) hash ^= Y.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Gid != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(Gid);
          }
          if (X != 0) {
            output.WriteRawTag(16);
            output.WriteInt32(X);
          }
          if (Y != 0) {
            output.WriteRawTag(24);
            output.WriteInt32(Y);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Gid != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Gid);
          }
          if (X != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(X);
          }
          if (Y != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Y);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(TileInfo other) {
          if (other == null) {
            return;
          }
          if (other.Gid != 0) {
            Gid = other.Gid;
          }
          if (other.X != 0) {
            X = other.X;
          }
          if (other.Y != 0) {
            Y = other.Y;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Gid = input.ReadInt32();
                break;
              }
              case 16: {
                X = input.ReadInt32();
                break;
              }
              case 24: {
                Y = input.ReadInt32();
                break;
              }
            }
          }
        }

      }

      public sealed partial class TileSetting : pb::IMessage<TileSetting> {
        private static readonly pb::MessageParser<TileSetting> _parser = new pb::MessageParser<TileSetting>(() => new TileSetting());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<TileSetting> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Proto.TmxMap.Descriptor.NestedTypes[5]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TileSetting() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TileSetting(TileSetting other) : this() {
          barrertype_ = other.barrertype_;
          trapindex_ = other.trapindex_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TileSetting Clone() {
          return new TileSetting(this);
        }

        /// <summary>Field number for the "barrertype" field.</summary>
        public const int BarrertypeFieldNumber = 1;
        private global::Proto.TmxMap.Types.BarrerType barrertype_ = global::Proto.TmxMap.Types.BarrerType.None;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Proto.TmxMap.Types.BarrerType Barrertype {
          get { return barrertype_; }
          set {
            barrertype_ = value;
          }
        }

        /// <summary>Field number for the "trapindex" field.</summary>
        public const int TrapindexFieldNumber = 2;
        private int trapindex_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Trapindex {
          get { return trapindex_; }
          set {
            trapindex_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as TileSetting);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(TileSetting other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Barrertype != other.Barrertype) return false;
          if (Trapindex != other.Trapindex) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Barrertype != global::Proto.TmxMap.Types.BarrerType.None) hash ^= Barrertype.GetHashCode();
          if (Trapindex != 0) hash ^= Trapindex.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Barrertype != global::Proto.TmxMap.Types.BarrerType.None) {
            output.WriteRawTag(8);
            output.WriteEnum((int) Barrertype);
          }
          if (Trapindex != 0) {
            output.WriteRawTag(16);
            output.WriteInt32(Trapindex);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Barrertype != global::Proto.TmxMap.Types.BarrerType.None) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Barrertype);
          }
          if (Trapindex != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Trapindex);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(TileSetting other) {
          if (other == null) {
            return;
          }
          if (other.Barrertype != global::Proto.TmxMap.Types.BarrerType.None) {
            Barrertype = other.Barrertype;
          }
          if (other.Trapindex != 0) {
            Trapindex = other.Trapindex;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Barrertype = (global::Proto.TmxMap.Types.BarrerType) input.ReadEnum();
                break;
              }
              case 16: {
                Trapindex = input.ReadInt32();
                break;
              }
            }
          }
        }

      }

      public sealed partial class Layer : pb::IMessage<Layer> {
        private static readonly pb::MessageParser<Layer> _parser = new pb::MessageParser<Layer>(() => new Layer());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Layer> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Proto.TmxMap.Descriptor.NestedTypes[6]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Layer() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Layer(Layer other) : this() {
          index_ = other.index_;
          tiles_ = other.tiles_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Layer Clone() {
          return new Layer(this);
        }

        /// <summary>Field number for the "index" field.</summary>
        public const int IndexFieldNumber = 1;
        private int index_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Index {
          get { return index_; }
          set {
            index_ = value;
          }
        }

        /// <summary>Field number for the "tiles" field.</summary>
        public const int TilesFieldNumber = 2;
        private static readonly pb::FieldCodec<global::Proto.TmxMap.Types.TileInfo> _repeated_tiles_codec
            = pb::FieldCodec.ForMessage(18, global::Proto.TmxMap.Types.TileInfo.Parser);
        private readonly pbc::RepeatedField<global::Proto.TmxMap.Types.TileInfo> tiles_ = new pbc::RepeatedField<global::Proto.TmxMap.Types.TileInfo>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Proto.TmxMap.Types.TileInfo> Tiles {
          get { return tiles_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Layer);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Layer other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Index != other.Index) return false;
          if(!tiles_.Equals(other.tiles_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Index != 0) hash ^= Index.GetHashCode();
          hash ^= tiles_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Index != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(Index);
          }
          tiles_.WriteTo(output, _repeated_tiles_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Index != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Index);
          }
          size += tiles_.CalculateSize(_repeated_tiles_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Layer other) {
          if (other == null) {
            return;
          }
          if (other.Index != 0) {
            Index = other.Index;
          }
          tiles_.Add(other.tiles_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Index = input.ReadInt32();
                break;
              }
              case 18: {
                tiles_.AddEntriesFrom(input, _repeated_tiles_codec);
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
