// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TmxMapMessage.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_TmxMapMessage_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_TmxMapMessage_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_TmxMapMessage_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_TmxMapMessage_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[8]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_TmxMapMessage_2eproto;
namespace Proto {
class TmxMap;
class TmxMapDefaultTypeInternal;
extern TmxMapDefaultTypeInternal _TmxMap_default_instance_;
class TmxMap_ImgSet;
class TmxMap_ImgSetDefaultTypeInternal;
extern TmxMap_ImgSetDefaultTypeInternal _TmxMap_ImgSet_default_instance_;
class TmxMap_Layer;
class TmxMap_LayerDefaultTypeInternal;
extern TmxMap_LayerDefaultTypeInternal _TmxMap_Layer_default_instance_;
class TmxMap_Point;
class TmxMap_PointDefaultTypeInternal;
extern TmxMap_PointDefaultTypeInternal _TmxMap_Point_default_instance_;
class TmxMap_Rect;
class TmxMap_RectDefaultTypeInternal;
extern TmxMap_RectDefaultTypeInternal _TmxMap_Rect_default_instance_;
class TmxMap_TileImg;
class TmxMap_TileImgDefaultTypeInternal;
extern TmxMap_TileImgDefaultTypeInternal _TmxMap_TileImg_default_instance_;
class TmxMap_TileInfo;
class TmxMap_TileInfoDefaultTypeInternal;
extern TmxMap_TileInfoDefaultTypeInternal _TmxMap_TileInfo_default_instance_;
class TmxMap_TileSetting;
class TmxMap_TileSettingDefaultTypeInternal;
extern TmxMap_TileSettingDefaultTypeInternal _TmxMap_TileSetting_default_instance_;
}  // namespace Proto
PROTOBUF_NAMESPACE_OPEN
template<> ::Proto::TmxMap* Arena::CreateMaybeMessage<::Proto::TmxMap>(Arena*);
template<> ::Proto::TmxMap_ImgSet* Arena::CreateMaybeMessage<::Proto::TmxMap_ImgSet>(Arena*);
template<> ::Proto::TmxMap_Layer* Arena::CreateMaybeMessage<::Proto::TmxMap_Layer>(Arena*);
template<> ::Proto::TmxMap_Point* Arena::CreateMaybeMessage<::Proto::TmxMap_Point>(Arena*);
template<> ::Proto::TmxMap_Rect* Arena::CreateMaybeMessage<::Proto::TmxMap_Rect>(Arena*);
template<> ::Proto::TmxMap_TileImg* Arena::CreateMaybeMessage<::Proto::TmxMap_TileImg>(Arena*);
template<> ::Proto::TmxMap_TileInfo* Arena::CreateMaybeMessage<::Proto::TmxMap_TileInfo>(Arena*);
template<> ::Proto::TmxMap_TileSetting* Arena::CreateMaybeMessage<::Proto::TmxMap_TileSetting>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Proto {

enum TmxMap_BarrerType : int {
  TmxMap_BarrerType_None = 0,
  TmxMap_BarrerType_Obstacle = 1,
  TmxMap_BarrerType_CanOverObstacle = 2,
  TmxMap_BarrerType_Trans = 3,
  TmxMap_BarrerType_CanOVerTrans = 4,
  TmxMap_BarrerType_TmxMap_BarrerType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  TmxMap_BarrerType_TmxMap_BarrerType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool TmxMap_BarrerType_IsValid(int value);
constexpr TmxMap_BarrerType TmxMap_BarrerType_BarrerType_MIN = TmxMap_BarrerType_None;
constexpr TmxMap_BarrerType TmxMap_BarrerType_BarrerType_MAX = TmxMap_BarrerType_CanOVerTrans;
constexpr int TmxMap_BarrerType_BarrerType_ARRAYSIZE = TmxMap_BarrerType_BarrerType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TmxMap_BarrerType_descriptor();
template<typename T>
inline const std::string& TmxMap_BarrerType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TmxMap_BarrerType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TmxMap_BarrerType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TmxMap_BarrerType_descriptor(), enum_t_value);
}
inline bool TmxMap_BarrerType_Parse(
    const std::string& name, TmxMap_BarrerType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TmxMap_BarrerType>(
    TmxMap_BarrerType_descriptor(), name, value);
}
// ===================================================================

class TmxMap_Rect :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.TmxMap.Rect) */ {
 public:
  TmxMap_Rect();
  virtual ~TmxMap_Rect();

  TmxMap_Rect(const TmxMap_Rect& from);
  TmxMap_Rect(TmxMap_Rect&& from) noexcept
    : TmxMap_Rect() {
    *this = ::std::move(from);
  }

  inline TmxMap_Rect& operator=(const TmxMap_Rect& from) {
    CopyFrom(from);
    return *this;
  }
  inline TmxMap_Rect& operator=(TmxMap_Rect&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TmxMap_Rect& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TmxMap_Rect* internal_default_instance() {
    return reinterpret_cast<const TmxMap_Rect*>(
               &_TmxMap_Rect_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TmxMap_Rect& a, TmxMap_Rect& b) {
    a.Swap(&b);
  }
  inline void Swap(TmxMap_Rect* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TmxMap_Rect* New() const final {
    return CreateMaybeMessage<TmxMap_Rect>(nullptr);
  }

  TmxMap_Rect* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TmxMap_Rect>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TmxMap_Rect& from);
  void MergeFrom(const TmxMap_Rect& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TmxMap_Rect* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.TmxMap.Rect";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_TmxMapMessage_2eproto);
    return ::descriptor_table_TmxMapMessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kWFieldNumber = 3,
    kHFieldNumber = 4,
  };
  // int32 x = 1;
  void clear_x();
  ::PROTOBUF_NAMESPACE_ID::int32 x() const;
  void set_x(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_x() const;
  void _internal_set_x(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 y = 2;
  void clear_y();
  ::PROTOBUF_NAMESPACE_ID::int32 y() const;
  void set_y(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_y() const;
  void _internal_set_y(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 w = 3;
  void clear_w();
  ::PROTOBUF_NAMESPACE_ID::int32 w() const;
  void set_w(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_w() const;
  void _internal_set_w(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 h = 4;
  void clear_h();
  ::PROTOBUF_NAMESPACE_ID::int32 h() const;
  void set_h(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_h() const;
  void _internal_set_h(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Proto.TmxMap.Rect)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 x_;
  ::PROTOBUF_NAMESPACE_ID::int32 y_;
  ::PROTOBUF_NAMESPACE_ID::int32 w_;
  ::PROTOBUF_NAMESPACE_ID::int32 h_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TmxMapMessage_2eproto;
};
// -------------------------------------------------------------------

class TmxMap_Point :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.TmxMap.Point) */ {
 public:
  TmxMap_Point();
  virtual ~TmxMap_Point();

  TmxMap_Point(const TmxMap_Point& from);
  TmxMap_Point(TmxMap_Point&& from) noexcept
    : TmxMap_Point() {
    *this = ::std::move(from);
  }

  inline TmxMap_Point& operator=(const TmxMap_Point& from) {
    CopyFrom(from);
    return *this;
  }
  inline TmxMap_Point& operator=(TmxMap_Point&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TmxMap_Point& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TmxMap_Point* internal_default_instance() {
    return reinterpret_cast<const TmxMap_Point*>(
               &_TmxMap_Point_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TmxMap_Point& a, TmxMap_Point& b) {
    a.Swap(&b);
  }
  inline void Swap(TmxMap_Point* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TmxMap_Point* New() const final {
    return CreateMaybeMessage<TmxMap_Point>(nullptr);
  }

  TmxMap_Point* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TmxMap_Point>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TmxMap_Point& from);
  void MergeFrom(const TmxMap_Point& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TmxMap_Point* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.TmxMap.Point";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_TmxMapMessage_2eproto);
    return ::descriptor_table_TmxMapMessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
  };
  // int32 x = 1;
  void clear_x();
  ::PROTOBUF_NAMESPACE_ID::int32 x() const;
  void set_x(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_x() const;
  void _internal_set_x(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 y = 2;
  void clear_y();
  ::PROTOBUF_NAMESPACE_ID::int32 y() const;
  void set_y(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_y() const;
  void _internal_set_y(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Proto.TmxMap.Point)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 x_;
  ::PROTOBUF_NAMESPACE_ID::int32 y_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TmxMapMessage_2eproto;
};
// -------------------------------------------------------------------

class TmxMap_ImgSet :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.TmxMap.ImgSet) */ {
 public:
  TmxMap_ImgSet();
  virtual ~TmxMap_ImgSet();

  TmxMap_ImgSet(const TmxMap_ImgSet& from);
  TmxMap_ImgSet(TmxMap_ImgSet&& from) noexcept
    : TmxMap_ImgSet() {
    *this = ::std::move(from);
  }

  inline TmxMap_ImgSet& operator=(const TmxMap_ImgSet& from) {
    CopyFrom(from);
    return *this;
  }
  inline TmxMap_ImgSet& operator=(TmxMap_ImgSet&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TmxMap_ImgSet& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TmxMap_ImgSet* internal_default_instance() {
    return reinterpret_cast<const TmxMap_ImgSet*>(
               &_TmxMap_ImgSet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(TmxMap_ImgSet& a, TmxMap_ImgSet& b) {
    a.Swap(&b);
  }
  inline void Swap(TmxMap_ImgSet* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TmxMap_ImgSet* New() const final {
    return CreateMaybeMessage<TmxMap_ImgSet>(nullptr);
  }

  TmxMap_ImgSet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TmxMap_ImgSet>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TmxMap_ImgSet& from);
  void MergeFrom(const TmxMap_ImgSet& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TmxMap_ImgSet* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.TmxMap.ImgSet";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_TmxMapMessage_2eproto);
    return ::descriptor_table_TmxMapMessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathFieldNumber = 1,
  };
  // string path = 1;
  void clear_path();
  const std::string& path() const;
  void set_path(const std::string& value);
  void set_path(std::string&& value);
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  std::string* mutable_path();
  std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // @@protoc_insertion_point(class_scope:Proto.TmxMap.ImgSet)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TmxMapMessage_2eproto;
};
// -------------------------------------------------------------------

class TmxMap_TileImg :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.TmxMap.TileImg) */ {
 public:
  TmxMap_TileImg();
  virtual ~TmxMap_TileImg();

  TmxMap_TileImg(const TmxMap_TileImg& from);
  TmxMap_TileImg(TmxMap_TileImg&& from) noexcept
    : TmxMap_TileImg() {
    *this = ::std::move(from);
  }

  inline TmxMap_TileImg& operator=(const TmxMap_TileImg& from) {
    CopyFrom(from);
    return *this;
  }
  inline TmxMap_TileImg& operator=(TmxMap_TileImg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TmxMap_TileImg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TmxMap_TileImg* internal_default_instance() {
    return reinterpret_cast<const TmxMap_TileImg*>(
               &_TmxMap_TileImg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(TmxMap_TileImg& a, TmxMap_TileImg& b) {
    a.Swap(&b);
  }
  inline void Swap(TmxMap_TileImg* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TmxMap_TileImg* New() const final {
    return CreateMaybeMessage<TmxMap_TileImg>(nullptr);
  }

  TmxMap_TileImg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TmxMap_TileImg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TmxMap_TileImg& from);
  void MergeFrom(const TmxMap_TileImg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TmxMap_TileImg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.TmxMap.TileImg";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_TmxMapMessage_2eproto);
    return ::descriptor_table_TmxMapMessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRegionFieldNumber = 3,
    kOffsetFieldNumber = 4,
    kGidFieldNumber = 1,
    kImgindexFieldNumber = 2,
  };
  // .Proto.TmxMap.Rect region = 3;
  bool has_region() const;
  private:
  bool _internal_has_region() const;
  public:
  void clear_region();
  const ::Proto::TmxMap_Rect& region() const;
  ::Proto::TmxMap_Rect* release_region();
  ::Proto::TmxMap_Rect* mutable_region();
  void set_allocated_region(::Proto::TmxMap_Rect* region);
  private:
  const ::Proto::TmxMap_Rect& _internal_region() const;
  ::Proto::TmxMap_Rect* _internal_mutable_region();
  public:

  // .Proto.TmxMap.Point offset = 4;
  bool has_offset() const;
  private:
  bool _internal_has_offset() const;
  public:
  void clear_offset();
  const ::Proto::TmxMap_Point& offset() const;
  ::Proto::TmxMap_Point* release_offset();
  ::Proto::TmxMap_Point* mutable_offset();
  void set_allocated_offset(::Proto::TmxMap_Point* offset);
  private:
  const ::Proto::TmxMap_Point& _internal_offset() const;
  ::Proto::TmxMap_Point* _internal_mutable_offset();
  public:

  // int32 gid = 1;
  void clear_gid();
  ::PROTOBUF_NAMESPACE_ID::int32 gid() const;
  void set_gid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_gid() const;
  void _internal_set_gid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 imgindex = 2;
  void clear_imgindex();
  ::PROTOBUF_NAMESPACE_ID::int32 imgindex() const;
  void set_imgindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_imgindex() const;
  void _internal_set_imgindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Proto.TmxMap.TileImg)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::Proto::TmxMap_Rect* region_;
  ::Proto::TmxMap_Point* offset_;
  ::PROTOBUF_NAMESPACE_ID::int32 gid_;
  ::PROTOBUF_NAMESPACE_ID::int32 imgindex_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TmxMapMessage_2eproto;
};
// -------------------------------------------------------------------

class TmxMap_TileInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.TmxMap.TileInfo) */ {
 public:
  TmxMap_TileInfo();
  virtual ~TmxMap_TileInfo();

  TmxMap_TileInfo(const TmxMap_TileInfo& from);
  TmxMap_TileInfo(TmxMap_TileInfo&& from) noexcept
    : TmxMap_TileInfo() {
    *this = ::std::move(from);
  }

  inline TmxMap_TileInfo& operator=(const TmxMap_TileInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline TmxMap_TileInfo& operator=(TmxMap_TileInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TmxMap_TileInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TmxMap_TileInfo* internal_default_instance() {
    return reinterpret_cast<const TmxMap_TileInfo*>(
               &_TmxMap_TileInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(TmxMap_TileInfo& a, TmxMap_TileInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(TmxMap_TileInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TmxMap_TileInfo* New() const final {
    return CreateMaybeMessage<TmxMap_TileInfo>(nullptr);
  }

  TmxMap_TileInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TmxMap_TileInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TmxMap_TileInfo& from);
  void MergeFrom(const TmxMap_TileInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TmxMap_TileInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.TmxMap.TileInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_TmxMapMessage_2eproto);
    return ::descriptor_table_TmxMapMessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGidFieldNumber = 1,
    kXFieldNumber = 2,
    kYFieldNumber = 3,
  };
  // int32 gid = 1;
  void clear_gid();
  ::PROTOBUF_NAMESPACE_ID::int32 gid() const;
  void set_gid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_gid() const;
  void _internal_set_gid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 x = 2;
  void clear_x();
  ::PROTOBUF_NAMESPACE_ID::int32 x() const;
  void set_x(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_x() const;
  void _internal_set_x(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 y = 3;
  void clear_y();
  ::PROTOBUF_NAMESPACE_ID::int32 y() const;
  void set_y(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_y() const;
  void _internal_set_y(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Proto.TmxMap.TileInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 gid_;
  ::PROTOBUF_NAMESPACE_ID::int32 x_;
  ::PROTOBUF_NAMESPACE_ID::int32 y_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TmxMapMessage_2eproto;
};
// -------------------------------------------------------------------

class TmxMap_TileSetting :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.TmxMap.TileSetting) */ {
 public:
  TmxMap_TileSetting();
  virtual ~TmxMap_TileSetting();

  TmxMap_TileSetting(const TmxMap_TileSetting& from);
  TmxMap_TileSetting(TmxMap_TileSetting&& from) noexcept
    : TmxMap_TileSetting() {
    *this = ::std::move(from);
  }

  inline TmxMap_TileSetting& operator=(const TmxMap_TileSetting& from) {
    CopyFrom(from);
    return *this;
  }
  inline TmxMap_TileSetting& operator=(TmxMap_TileSetting&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TmxMap_TileSetting& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TmxMap_TileSetting* internal_default_instance() {
    return reinterpret_cast<const TmxMap_TileSetting*>(
               &_TmxMap_TileSetting_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(TmxMap_TileSetting& a, TmxMap_TileSetting& b) {
    a.Swap(&b);
  }
  inline void Swap(TmxMap_TileSetting* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TmxMap_TileSetting* New() const final {
    return CreateMaybeMessage<TmxMap_TileSetting>(nullptr);
  }

  TmxMap_TileSetting* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TmxMap_TileSetting>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TmxMap_TileSetting& from);
  void MergeFrom(const TmxMap_TileSetting& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TmxMap_TileSetting* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.TmxMap.TileSetting";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_TmxMapMessage_2eproto);
    return ::descriptor_table_TmxMapMessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBarrertypeFieldNumber = 1,
    kTrapindexFieldNumber = 2,
  };
  // .Proto.TmxMap.BarrerType barrertype = 1;
  void clear_barrertype();
  ::Proto::TmxMap_BarrerType barrertype() const;
  void set_barrertype(::Proto::TmxMap_BarrerType value);
  private:
  ::Proto::TmxMap_BarrerType _internal_barrertype() const;
  void _internal_set_barrertype(::Proto::TmxMap_BarrerType value);
  public:

  // int32 trapindex = 2;
  void clear_trapindex();
  ::PROTOBUF_NAMESPACE_ID::int32 trapindex() const;
  void set_trapindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_trapindex() const;
  void _internal_set_trapindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Proto.TmxMap.TileSetting)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  int barrertype_;
  ::PROTOBUF_NAMESPACE_ID::int32 trapindex_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TmxMapMessage_2eproto;
};
// -------------------------------------------------------------------

class TmxMap_Layer :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.TmxMap.Layer) */ {
 public:
  TmxMap_Layer();
  virtual ~TmxMap_Layer();

  TmxMap_Layer(const TmxMap_Layer& from);
  TmxMap_Layer(TmxMap_Layer&& from) noexcept
    : TmxMap_Layer() {
    *this = ::std::move(from);
  }

  inline TmxMap_Layer& operator=(const TmxMap_Layer& from) {
    CopyFrom(from);
    return *this;
  }
  inline TmxMap_Layer& operator=(TmxMap_Layer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TmxMap_Layer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TmxMap_Layer* internal_default_instance() {
    return reinterpret_cast<const TmxMap_Layer*>(
               &_TmxMap_Layer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(TmxMap_Layer& a, TmxMap_Layer& b) {
    a.Swap(&b);
  }
  inline void Swap(TmxMap_Layer* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TmxMap_Layer* New() const final {
    return CreateMaybeMessage<TmxMap_Layer>(nullptr);
  }

  TmxMap_Layer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TmxMap_Layer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TmxMap_Layer& from);
  void MergeFrom(const TmxMap_Layer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TmxMap_Layer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.TmxMap.Layer";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_TmxMapMessage_2eproto);
    return ::descriptor_table_TmxMapMessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTilesFieldNumber = 2,
    kIndexFieldNumber = 1,
  };
  // repeated .Proto.TmxMap.TileInfo tiles = 2;
  int tiles_size() const;
  private:
  int _internal_tiles_size() const;
  public:
  void clear_tiles();
  ::Proto::TmxMap_TileInfo* mutable_tiles(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::TmxMap_TileInfo >*
      mutable_tiles();
  private:
  const ::Proto::TmxMap_TileInfo& _internal_tiles(int index) const;
  ::Proto::TmxMap_TileInfo* _internal_add_tiles();
  public:
  const ::Proto::TmxMap_TileInfo& tiles(int index) const;
  ::Proto::TmxMap_TileInfo* add_tiles();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::TmxMap_TileInfo >&
      tiles() const;

  // int32 index = 1;
  void clear_index();
  ::PROTOBUF_NAMESPACE_ID::int32 index() const;
  void set_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_index() const;
  void _internal_set_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Proto.TmxMap.Layer)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::TmxMap_TileInfo > tiles_;
  ::PROTOBUF_NAMESPACE_ID::int32 index_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TmxMapMessage_2eproto;
};
// -------------------------------------------------------------------

class TmxMap :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.TmxMap) */ {
 public:
  TmxMap();
  virtual ~TmxMap();

  TmxMap(const TmxMap& from);
  TmxMap(TmxMap&& from) noexcept
    : TmxMap() {
    *this = ::std::move(from);
  }

  inline TmxMap& operator=(const TmxMap& from) {
    CopyFrom(from);
    return *this;
  }
  inline TmxMap& operator=(TmxMap&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TmxMap& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TmxMap* internal_default_instance() {
    return reinterpret_cast<const TmxMap*>(
               &_TmxMap_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(TmxMap& a, TmxMap& b) {
    a.Swap(&b);
  }
  inline void Swap(TmxMap* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TmxMap* New() const final {
    return CreateMaybeMessage<TmxMap>(nullptr);
  }

  TmxMap* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TmxMap>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TmxMap& from);
  void MergeFrom(const TmxMap& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TmxMap* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.TmxMap";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_TmxMapMessage_2eproto);
    return ::descriptor_table_TmxMapMessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef TmxMap_Rect Rect;
  typedef TmxMap_Point Point;
  typedef TmxMap_ImgSet ImgSet;
  typedef TmxMap_TileImg TileImg;
  typedef TmxMap_TileInfo TileInfo;
  typedef TmxMap_TileSetting TileSetting;
  typedef TmxMap_Layer Layer;

  typedef TmxMap_BarrerType BarrerType;
  static constexpr BarrerType None =
    TmxMap_BarrerType_None;
  static constexpr BarrerType Obstacle =
    TmxMap_BarrerType_Obstacle;
  static constexpr BarrerType CanOverObstacle =
    TmxMap_BarrerType_CanOverObstacle;
  static constexpr BarrerType Trans =
    TmxMap_BarrerType_Trans;
  static constexpr BarrerType CanOVerTrans =
    TmxMap_BarrerType_CanOVerTrans;
  static inline bool BarrerType_IsValid(int value) {
    return TmxMap_BarrerType_IsValid(value);
  }
  static constexpr BarrerType BarrerType_MIN =
    TmxMap_BarrerType_BarrerType_MIN;
  static constexpr BarrerType BarrerType_MAX =
    TmxMap_BarrerType_BarrerType_MAX;
  static constexpr int BarrerType_ARRAYSIZE =
    TmxMap_BarrerType_BarrerType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  BarrerType_descriptor() {
    return TmxMap_BarrerType_descriptor();
  }
  template<typename T>
  static inline const std::string& BarrerType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, BarrerType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function BarrerType_Name.");
    return TmxMap_BarrerType_Name(enum_t_value);
  }
  static inline bool BarrerType_Parse(const std::string& name,
      BarrerType* value) {
    return TmxMap_BarrerType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kImgsFieldNumber = 3,
    kTileimgsFieldNumber = 4,
    kSettingsFieldNumber = 5,
    kLayersFieldNumber = 6,
    kWidthFieldNumber = 1,
    kHeightFieldNumber = 2,
  };
  // repeated .Proto.TmxMap.ImgSet imgs = 3;
  int imgs_size() const;
  private:
  int _internal_imgs_size() const;
  public:
  void clear_imgs();
  ::Proto::TmxMap_ImgSet* mutable_imgs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::TmxMap_ImgSet >*
      mutable_imgs();
  private:
  const ::Proto::TmxMap_ImgSet& _internal_imgs(int index) const;
  ::Proto::TmxMap_ImgSet* _internal_add_imgs();
  public:
  const ::Proto::TmxMap_ImgSet& imgs(int index) const;
  ::Proto::TmxMap_ImgSet* add_imgs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::TmxMap_ImgSet >&
      imgs() const;

  // repeated .Proto.TmxMap.TileImg tileimgs = 4;
  int tileimgs_size() const;
  private:
  int _internal_tileimgs_size() const;
  public:
  void clear_tileimgs();
  ::Proto::TmxMap_TileImg* mutable_tileimgs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::TmxMap_TileImg >*
      mutable_tileimgs();
  private:
  const ::Proto::TmxMap_TileImg& _internal_tileimgs(int index) const;
  ::Proto::TmxMap_TileImg* _internal_add_tileimgs();
  public:
  const ::Proto::TmxMap_TileImg& tileimgs(int index) const;
  ::Proto::TmxMap_TileImg* add_tileimgs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::TmxMap_TileImg >&
      tileimgs() const;

  // repeated .Proto.TmxMap.TileSetting settings = 5;
  int settings_size() const;
  private:
  int _internal_settings_size() const;
  public:
  void clear_settings();
  ::Proto::TmxMap_TileSetting* mutable_settings(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::TmxMap_TileSetting >*
      mutable_settings();
  private:
  const ::Proto::TmxMap_TileSetting& _internal_settings(int index) const;
  ::Proto::TmxMap_TileSetting* _internal_add_settings();
  public:
  const ::Proto::TmxMap_TileSetting& settings(int index) const;
  ::Proto::TmxMap_TileSetting* add_settings();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::TmxMap_TileSetting >&
      settings() const;

  // repeated .Proto.TmxMap.Layer layers = 6;
  int layers_size() const;
  private:
  int _internal_layers_size() const;
  public:
  void clear_layers();
  ::Proto::TmxMap_Layer* mutable_layers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::TmxMap_Layer >*
      mutable_layers();
  private:
  const ::Proto::TmxMap_Layer& _internal_layers(int index) const;
  ::Proto::TmxMap_Layer* _internal_add_layers();
  public:
  const ::Proto::TmxMap_Layer& layers(int index) const;
  ::Proto::TmxMap_Layer* add_layers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::TmxMap_Layer >&
      layers() const;

  // int32 width = 1;
  void clear_width();
  ::PROTOBUF_NAMESPACE_ID::int32 width() const;
  void set_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_width() const;
  void _internal_set_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 height = 2;
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::int32 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_height() const;
  void _internal_set_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Proto.TmxMap)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::TmxMap_ImgSet > imgs_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::TmxMap_TileImg > tileimgs_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::TmxMap_TileSetting > settings_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::TmxMap_Layer > layers_;
  ::PROTOBUF_NAMESPACE_ID::int32 width_;
  ::PROTOBUF_NAMESPACE_ID::int32 height_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TmxMapMessage_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TmxMap_Rect

// int32 x = 1;
inline void TmxMap_Rect::clear_x() {
  x_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TmxMap_Rect::_internal_x() const {
  return x_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TmxMap_Rect::x() const {
  // @@protoc_insertion_point(field_get:Proto.TmxMap.Rect.x)
  return _internal_x();
}
inline void TmxMap_Rect::_internal_set_x(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  x_ = value;
}
inline void TmxMap_Rect::set_x(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:Proto.TmxMap.Rect.x)
}

// int32 y = 2;
inline void TmxMap_Rect::clear_y() {
  y_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TmxMap_Rect::_internal_y() const {
  return y_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TmxMap_Rect::y() const {
  // @@protoc_insertion_point(field_get:Proto.TmxMap.Rect.y)
  return _internal_y();
}
inline void TmxMap_Rect::_internal_set_y(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  y_ = value;
}
inline void TmxMap_Rect::set_y(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:Proto.TmxMap.Rect.y)
}

// int32 w = 3;
inline void TmxMap_Rect::clear_w() {
  w_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TmxMap_Rect::_internal_w() const {
  return w_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TmxMap_Rect::w() const {
  // @@protoc_insertion_point(field_get:Proto.TmxMap.Rect.w)
  return _internal_w();
}
inline void TmxMap_Rect::_internal_set_w(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  w_ = value;
}
inline void TmxMap_Rect::set_w(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_w(value);
  // @@protoc_insertion_point(field_set:Proto.TmxMap.Rect.w)
}

// int32 h = 4;
inline void TmxMap_Rect::clear_h() {
  h_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TmxMap_Rect::_internal_h() const {
  return h_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TmxMap_Rect::h() const {
  // @@protoc_insertion_point(field_get:Proto.TmxMap.Rect.h)
  return _internal_h();
}
inline void TmxMap_Rect::_internal_set_h(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  h_ = value;
}
inline void TmxMap_Rect::set_h(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_h(value);
  // @@protoc_insertion_point(field_set:Proto.TmxMap.Rect.h)
}

// -------------------------------------------------------------------

// TmxMap_Point

// int32 x = 1;
inline void TmxMap_Point::clear_x() {
  x_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TmxMap_Point::_internal_x() const {
  return x_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TmxMap_Point::x() const {
  // @@protoc_insertion_point(field_get:Proto.TmxMap.Point.x)
  return _internal_x();
}
inline void TmxMap_Point::_internal_set_x(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  x_ = value;
}
inline void TmxMap_Point::set_x(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:Proto.TmxMap.Point.x)
}

// int32 y = 2;
inline void TmxMap_Point::clear_y() {
  y_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TmxMap_Point::_internal_y() const {
  return y_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TmxMap_Point::y() const {
  // @@protoc_insertion_point(field_get:Proto.TmxMap.Point.y)
  return _internal_y();
}
inline void TmxMap_Point::_internal_set_y(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  y_ = value;
}
inline void TmxMap_Point::set_y(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:Proto.TmxMap.Point.y)
}

// -------------------------------------------------------------------

// TmxMap_ImgSet

// string path = 1;
inline void TmxMap_ImgSet::clear_path() {
  path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TmxMap_ImgSet::path() const {
  // @@protoc_insertion_point(field_get:Proto.TmxMap.ImgSet.path)
  return _internal_path();
}
inline void TmxMap_ImgSet::set_path(const std::string& value) {
  _internal_set_path(value);
  // @@protoc_insertion_point(field_set:Proto.TmxMap.ImgSet.path)
}
inline std::string* TmxMap_ImgSet::mutable_path() {
  // @@protoc_insertion_point(field_mutable:Proto.TmxMap.ImgSet.path)
  return _internal_mutable_path();
}
inline const std::string& TmxMap_ImgSet::_internal_path() const {
  return path_.GetNoArena();
}
inline void TmxMap_ImgSet::_internal_set_path(const std::string& value) {
  
  path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TmxMap_ImgSet::set_path(std::string&& value) {
  
  path_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Proto.TmxMap.ImgSet.path)
}
inline void TmxMap_ImgSet::set_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Proto.TmxMap.ImgSet.path)
}
inline void TmxMap_ImgSet::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Proto.TmxMap.ImgSet.path)
}
inline std::string* TmxMap_ImgSet::_internal_mutable_path() {
  
  return path_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TmxMap_ImgSet::release_path() {
  // @@protoc_insertion_point(field_release:Proto.TmxMap.ImgSet.path)
  
  return path_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TmxMap_ImgSet::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:Proto.TmxMap.ImgSet.path)
}

// -------------------------------------------------------------------

// TmxMap_TileImg

// int32 gid = 1;
inline void TmxMap_TileImg::clear_gid() {
  gid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TmxMap_TileImg::_internal_gid() const {
  return gid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TmxMap_TileImg::gid() const {
  // @@protoc_insertion_point(field_get:Proto.TmxMap.TileImg.gid)
  return _internal_gid();
}
inline void TmxMap_TileImg::_internal_set_gid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  gid_ = value;
}
inline void TmxMap_TileImg::set_gid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_gid(value);
  // @@protoc_insertion_point(field_set:Proto.TmxMap.TileImg.gid)
}

// int32 imgindex = 2;
inline void TmxMap_TileImg::clear_imgindex() {
  imgindex_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TmxMap_TileImg::_internal_imgindex() const {
  return imgindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TmxMap_TileImg::imgindex() const {
  // @@protoc_insertion_point(field_get:Proto.TmxMap.TileImg.imgindex)
  return _internal_imgindex();
}
inline void TmxMap_TileImg::_internal_set_imgindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  imgindex_ = value;
}
inline void TmxMap_TileImg::set_imgindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_imgindex(value);
  // @@protoc_insertion_point(field_set:Proto.TmxMap.TileImg.imgindex)
}

// .Proto.TmxMap.Rect region = 3;
inline bool TmxMap_TileImg::_internal_has_region() const {
  return this != internal_default_instance() && region_ != nullptr;
}
inline bool TmxMap_TileImg::has_region() const {
  return _internal_has_region();
}
inline void TmxMap_TileImg::clear_region() {
  if (GetArenaNoVirtual() == nullptr && region_ != nullptr) {
    delete region_;
  }
  region_ = nullptr;
}
inline const ::Proto::TmxMap_Rect& TmxMap_TileImg::_internal_region() const {
  const ::Proto::TmxMap_Rect* p = region_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Proto::TmxMap_Rect*>(
      &::Proto::_TmxMap_Rect_default_instance_);
}
inline const ::Proto::TmxMap_Rect& TmxMap_TileImg::region() const {
  // @@protoc_insertion_point(field_get:Proto.TmxMap.TileImg.region)
  return _internal_region();
}
inline ::Proto::TmxMap_Rect* TmxMap_TileImg::release_region() {
  // @@protoc_insertion_point(field_release:Proto.TmxMap.TileImg.region)
  
  ::Proto::TmxMap_Rect* temp = region_;
  region_ = nullptr;
  return temp;
}
inline ::Proto::TmxMap_Rect* TmxMap_TileImg::_internal_mutable_region() {
  
  if (region_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proto::TmxMap_Rect>(GetArenaNoVirtual());
    region_ = p;
  }
  return region_;
}
inline ::Proto::TmxMap_Rect* TmxMap_TileImg::mutable_region() {
  // @@protoc_insertion_point(field_mutable:Proto.TmxMap.TileImg.region)
  return _internal_mutable_region();
}
inline void TmxMap_TileImg::set_allocated_region(::Proto::TmxMap_Rect* region) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete region_;
  }
  if (region) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      region = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, region, submessage_arena);
    }
    
  } else {
    
  }
  region_ = region;
  // @@protoc_insertion_point(field_set_allocated:Proto.TmxMap.TileImg.region)
}

// .Proto.TmxMap.Point offset = 4;
inline bool TmxMap_TileImg::_internal_has_offset() const {
  return this != internal_default_instance() && offset_ != nullptr;
}
inline bool TmxMap_TileImg::has_offset() const {
  return _internal_has_offset();
}
inline void TmxMap_TileImg::clear_offset() {
  if (GetArenaNoVirtual() == nullptr && offset_ != nullptr) {
    delete offset_;
  }
  offset_ = nullptr;
}
inline const ::Proto::TmxMap_Point& TmxMap_TileImg::_internal_offset() const {
  const ::Proto::TmxMap_Point* p = offset_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Proto::TmxMap_Point*>(
      &::Proto::_TmxMap_Point_default_instance_);
}
inline const ::Proto::TmxMap_Point& TmxMap_TileImg::offset() const {
  // @@protoc_insertion_point(field_get:Proto.TmxMap.TileImg.offset)
  return _internal_offset();
}
inline ::Proto::TmxMap_Point* TmxMap_TileImg::release_offset() {
  // @@protoc_insertion_point(field_release:Proto.TmxMap.TileImg.offset)
  
  ::Proto::TmxMap_Point* temp = offset_;
  offset_ = nullptr;
  return temp;
}
inline ::Proto::TmxMap_Point* TmxMap_TileImg::_internal_mutable_offset() {
  
  if (offset_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proto::TmxMap_Point>(GetArenaNoVirtual());
    offset_ = p;
  }
  return offset_;
}
inline ::Proto::TmxMap_Point* TmxMap_TileImg::mutable_offset() {
  // @@protoc_insertion_point(field_mutable:Proto.TmxMap.TileImg.offset)
  return _internal_mutable_offset();
}
inline void TmxMap_TileImg::set_allocated_offset(::Proto::TmxMap_Point* offset) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete offset_;
  }
  if (offset) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      offset = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, offset, submessage_arena);
    }
    
  } else {
    
  }
  offset_ = offset;
  // @@protoc_insertion_point(field_set_allocated:Proto.TmxMap.TileImg.offset)
}

// -------------------------------------------------------------------

// TmxMap_TileInfo

// int32 gid = 1;
inline void TmxMap_TileInfo::clear_gid() {
  gid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TmxMap_TileInfo::_internal_gid() const {
  return gid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TmxMap_TileInfo::gid() const {
  // @@protoc_insertion_point(field_get:Proto.TmxMap.TileInfo.gid)
  return _internal_gid();
}
inline void TmxMap_TileInfo::_internal_set_gid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  gid_ = value;
}
inline void TmxMap_TileInfo::set_gid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_gid(value);
  // @@protoc_insertion_point(field_set:Proto.TmxMap.TileInfo.gid)
}

// int32 x = 2;
inline void TmxMap_TileInfo::clear_x() {
  x_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TmxMap_TileInfo::_internal_x() const {
  return x_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TmxMap_TileInfo::x() const {
  // @@protoc_insertion_point(field_get:Proto.TmxMap.TileInfo.x)
  return _internal_x();
}
inline void TmxMap_TileInfo::_internal_set_x(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  x_ = value;
}
inline void TmxMap_TileInfo::set_x(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:Proto.TmxMap.TileInfo.x)
}

// int32 y = 3;
inline void TmxMap_TileInfo::clear_y() {
  y_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TmxMap_TileInfo::_internal_y() const {
  return y_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TmxMap_TileInfo::y() const {
  // @@protoc_insertion_point(field_get:Proto.TmxMap.TileInfo.y)
  return _internal_y();
}
inline void TmxMap_TileInfo::_internal_set_y(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  y_ = value;
}
inline void TmxMap_TileInfo::set_y(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:Proto.TmxMap.TileInfo.y)
}

// -------------------------------------------------------------------

// TmxMap_TileSetting

// .Proto.TmxMap.BarrerType barrertype = 1;
inline void TmxMap_TileSetting::clear_barrertype() {
  barrertype_ = 0;
}
inline ::Proto::TmxMap_BarrerType TmxMap_TileSetting::_internal_barrertype() const {
  return static_cast< ::Proto::TmxMap_BarrerType >(barrertype_);
}
inline ::Proto::TmxMap_BarrerType TmxMap_TileSetting::barrertype() const {
  // @@protoc_insertion_point(field_get:Proto.TmxMap.TileSetting.barrertype)
  return _internal_barrertype();
}
inline void TmxMap_TileSetting::_internal_set_barrertype(::Proto::TmxMap_BarrerType value) {
  
  barrertype_ = value;
}
inline void TmxMap_TileSetting::set_barrertype(::Proto::TmxMap_BarrerType value) {
  _internal_set_barrertype(value);
  // @@protoc_insertion_point(field_set:Proto.TmxMap.TileSetting.barrertype)
}

// int32 trapindex = 2;
inline void TmxMap_TileSetting::clear_trapindex() {
  trapindex_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TmxMap_TileSetting::_internal_trapindex() const {
  return trapindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TmxMap_TileSetting::trapindex() const {
  // @@protoc_insertion_point(field_get:Proto.TmxMap.TileSetting.trapindex)
  return _internal_trapindex();
}
inline void TmxMap_TileSetting::_internal_set_trapindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  trapindex_ = value;
}
inline void TmxMap_TileSetting::set_trapindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_trapindex(value);
  // @@protoc_insertion_point(field_set:Proto.TmxMap.TileSetting.trapindex)
}

// -------------------------------------------------------------------

// TmxMap_Layer

// int32 index = 1;
inline void TmxMap_Layer::clear_index() {
  index_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TmxMap_Layer::_internal_index() const {
  return index_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TmxMap_Layer::index() const {
  // @@protoc_insertion_point(field_get:Proto.TmxMap.Layer.index)
  return _internal_index();
}
inline void TmxMap_Layer::_internal_set_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  index_ = value;
}
inline void TmxMap_Layer::set_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:Proto.TmxMap.Layer.index)
}

// repeated .Proto.TmxMap.TileInfo tiles = 2;
inline int TmxMap_Layer::_internal_tiles_size() const {
  return tiles_.size();
}
inline int TmxMap_Layer::tiles_size() const {
  return _internal_tiles_size();
}
inline void TmxMap_Layer::clear_tiles() {
  tiles_.Clear();
}
inline ::Proto::TmxMap_TileInfo* TmxMap_Layer::mutable_tiles(int index) {
  // @@protoc_insertion_point(field_mutable:Proto.TmxMap.Layer.tiles)
  return tiles_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::TmxMap_TileInfo >*
TmxMap_Layer::mutable_tiles() {
  // @@protoc_insertion_point(field_mutable_list:Proto.TmxMap.Layer.tiles)
  return &tiles_;
}
inline const ::Proto::TmxMap_TileInfo& TmxMap_Layer::_internal_tiles(int index) const {
  return tiles_.Get(index);
}
inline const ::Proto::TmxMap_TileInfo& TmxMap_Layer::tiles(int index) const {
  // @@protoc_insertion_point(field_get:Proto.TmxMap.Layer.tiles)
  return _internal_tiles(index);
}
inline ::Proto::TmxMap_TileInfo* TmxMap_Layer::_internal_add_tiles() {
  return tiles_.Add();
}
inline ::Proto::TmxMap_TileInfo* TmxMap_Layer::add_tiles() {
  // @@protoc_insertion_point(field_add:Proto.TmxMap.Layer.tiles)
  return _internal_add_tiles();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::TmxMap_TileInfo >&
TmxMap_Layer::tiles() const {
  // @@protoc_insertion_point(field_list:Proto.TmxMap.Layer.tiles)
  return tiles_;
}

// -------------------------------------------------------------------

// TmxMap

// int32 width = 1;
inline void TmxMap::clear_width() {
  width_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TmxMap::_internal_width() const {
  return width_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TmxMap::width() const {
  // @@protoc_insertion_point(field_get:Proto.TmxMap.width)
  return _internal_width();
}
inline void TmxMap::_internal_set_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  width_ = value;
}
inline void TmxMap::set_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:Proto.TmxMap.width)
}

// int32 height = 2;
inline void TmxMap::clear_height() {
  height_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TmxMap::_internal_height() const {
  return height_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TmxMap::height() const {
  // @@protoc_insertion_point(field_get:Proto.TmxMap.height)
  return _internal_height();
}
inline void TmxMap::_internal_set_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  height_ = value;
}
inline void TmxMap::set_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:Proto.TmxMap.height)
}

// repeated .Proto.TmxMap.ImgSet imgs = 3;
inline int TmxMap::_internal_imgs_size() const {
  return imgs_.size();
}
inline int TmxMap::imgs_size() const {
  return _internal_imgs_size();
}
inline void TmxMap::clear_imgs() {
  imgs_.Clear();
}
inline ::Proto::TmxMap_ImgSet* TmxMap::mutable_imgs(int index) {
  // @@protoc_insertion_point(field_mutable:Proto.TmxMap.imgs)
  return imgs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::TmxMap_ImgSet >*
TmxMap::mutable_imgs() {
  // @@protoc_insertion_point(field_mutable_list:Proto.TmxMap.imgs)
  return &imgs_;
}
inline const ::Proto::TmxMap_ImgSet& TmxMap::_internal_imgs(int index) const {
  return imgs_.Get(index);
}
inline const ::Proto::TmxMap_ImgSet& TmxMap::imgs(int index) const {
  // @@protoc_insertion_point(field_get:Proto.TmxMap.imgs)
  return _internal_imgs(index);
}
inline ::Proto::TmxMap_ImgSet* TmxMap::_internal_add_imgs() {
  return imgs_.Add();
}
inline ::Proto::TmxMap_ImgSet* TmxMap::add_imgs() {
  // @@protoc_insertion_point(field_add:Proto.TmxMap.imgs)
  return _internal_add_imgs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::TmxMap_ImgSet >&
TmxMap::imgs() const {
  // @@protoc_insertion_point(field_list:Proto.TmxMap.imgs)
  return imgs_;
}

// repeated .Proto.TmxMap.TileImg tileimgs = 4;
inline int TmxMap::_internal_tileimgs_size() const {
  return tileimgs_.size();
}
inline int TmxMap::tileimgs_size() const {
  return _internal_tileimgs_size();
}
inline void TmxMap::clear_tileimgs() {
  tileimgs_.Clear();
}
inline ::Proto::TmxMap_TileImg* TmxMap::mutable_tileimgs(int index) {
  // @@protoc_insertion_point(field_mutable:Proto.TmxMap.tileimgs)
  return tileimgs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::TmxMap_TileImg >*
TmxMap::mutable_tileimgs() {
  // @@protoc_insertion_point(field_mutable_list:Proto.TmxMap.tileimgs)
  return &tileimgs_;
}
inline const ::Proto::TmxMap_TileImg& TmxMap::_internal_tileimgs(int index) const {
  return tileimgs_.Get(index);
}
inline const ::Proto::TmxMap_TileImg& TmxMap::tileimgs(int index) const {
  // @@protoc_insertion_point(field_get:Proto.TmxMap.tileimgs)
  return _internal_tileimgs(index);
}
inline ::Proto::TmxMap_TileImg* TmxMap::_internal_add_tileimgs() {
  return tileimgs_.Add();
}
inline ::Proto::TmxMap_TileImg* TmxMap::add_tileimgs() {
  // @@protoc_insertion_point(field_add:Proto.TmxMap.tileimgs)
  return _internal_add_tileimgs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::TmxMap_TileImg >&
TmxMap::tileimgs() const {
  // @@protoc_insertion_point(field_list:Proto.TmxMap.tileimgs)
  return tileimgs_;
}

// repeated .Proto.TmxMap.TileSetting settings = 5;
inline int TmxMap::_internal_settings_size() const {
  return settings_.size();
}
inline int TmxMap::settings_size() const {
  return _internal_settings_size();
}
inline void TmxMap::clear_settings() {
  settings_.Clear();
}
inline ::Proto::TmxMap_TileSetting* TmxMap::mutable_settings(int index) {
  // @@protoc_insertion_point(field_mutable:Proto.TmxMap.settings)
  return settings_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::TmxMap_TileSetting >*
TmxMap::mutable_settings() {
  // @@protoc_insertion_point(field_mutable_list:Proto.TmxMap.settings)
  return &settings_;
}
inline const ::Proto::TmxMap_TileSetting& TmxMap::_internal_settings(int index) const {
  return settings_.Get(index);
}
inline const ::Proto::TmxMap_TileSetting& TmxMap::settings(int index) const {
  // @@protoc_insertion_point(field_get:Proto.TmxMap.settings)
  return _internal_settings(index);
}
inline ::Proto::TmxMap_TileSetting* TmxMap::_internal_add_settings() {
  return settings_.Add();
}
inline ::Proto::TmxMap_TileSetting* TmxMap::add_settings() {
  // @@protoc_insertion_point(field_add:Proto.TmxMap.settings)
  return _internal_add_settings();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::TmxMap_TileSetting >&
TmxMap::settings() const {
  // @@protoc_insertion_point(field_list:Proto.TmxMap.settings)
  return settings_;
}

// repeated .Proto.TmxMap.Layer layers = 6;
inline int TmxMap::_internal_layers_size() const {
  return layers_.size();
}
inline int TmxMap::layers_size() const {
  return _internal_layers_size();
}
inline void TmxMap::clear_layers() {
  layers_.Clear();
}
inline ::Proto::TmxMap_Layer* TmxMap::mutable_layers(int index) {
  // @@protoc_insertion_point(field_mutable:Proto.TmxMap.layers)
  return layers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::TmxMap_Layer >*
TmxMap::mutable_layers() {
  // @@protoc_insertion_point(field_mutable_list:Proto.TmxMap.layers)
  return &layers_;
}
inline const ::Proto::TmxMap_Layer& TmxMap::_internal_layers(int index) const {
  return layers_.Get(index);
}
inline const ::Proto::TmxMap_Layer& TmxMap::layers(int index) const {
  // @@protoc_insertion_point(field_get:Proto.TmxMap.layers)
  return _internal_layers(index);
}
inline ::Proto::TmxMap_Layer* TmxMap::_internal_add_layers() {
  return layers_.Add();
}
inline ::Proto::TmxMap_Layer* TmxMap::add_layers() {
  // @@protoc_insertion_point(field_add:Proto.TmxMap.layers)
  return _internal_add_layers();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::TmxMap_Layer >&
TmxMap::layers() const {
  // @@protoc_insertion_point(field_list:Proto.TmxMap.layers)
  return layers_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Proto

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::Proto::TmxMap_BarrerType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Proto::TmxMap_BarrerType>() {
  return ::Proto::TmxMap_BarrerType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_TmxMapMessage_2eproto
